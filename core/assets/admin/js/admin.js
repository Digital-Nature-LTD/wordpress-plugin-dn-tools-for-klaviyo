var x=Object.defineProperty;var h=r=>{throw TypeError(r)};var k=(r,t,e)=>t in r?x(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var o=(r,t,e)=>k(r,typeof t!="symbol"?t+"":t,e),S=(r,t,e)=>t.has(r)||h("Cannot "+e);var u=(r,t,e)=>t.has(r)?h("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(r):t.set(r,e);var g=(r,t,e)=>(S(r,t,"access private method"),e);class C{static async adopt(t,e){let s;if(typeof e=="string"){if(!e.includes("{")){const a=await fetch(e);a&&(e=await a.text())}s=new CSSStyleSheet,s.replaceSync(e)}else s=e;return s instanceof CSSStyleSheet?(t.shadowRoot.adoptedStyleSheets.push(s),!0):(console.error("Failed to load stylesheet:",e,"is not a valid CSSStyleSheet or string"),!1)}}var i,p;class b extends HTMLElement{constructor(e={}){super();u(this,i);o(this,"options",{template:null,mode:"open",attachShadow:!0,stylesheets:[]});if(this.options={...this.options,...e},this.options.attachShadow&&(this.attachShadow({mode:this.options.mode}),this.getAdoptedStyles().concat(this.options.stylesheets).map(this.adopt.bind(this))),this.options.template){let s=document.createElement("template");s.innerHTML=this.options.template,this.shadowRoot.appendChild(s.content.cloneNode(!0))}}adopt(e){C.adopt(this,e)}getAdoptedStyles(){return[]}static create(e={}){if(!this.tagName)throw new Error("tagName is not defined");return new this(e)}setSlotContent(e,s){let a=g(this,i,p).call(this,e);return a?(a.innerHTML="",a.appendChild(s),!0):!1}setSlotTextContent(e,s){let a=g(this,i,p).call(this,e);return a?(a.textContent=s,!0):!1}handleEvent(e){let s=e.type.charAt(0).toUpperCase()+e.type.slice(1);typeof this[`handle${s}`]=="function"?this[`handle${s}`](e):console.error(`No handler for event ${e.type}`)}}i=new WeakSet,p=function(e){let s=this.shadowRoot.querySelector(`slot[name="${e}"]`);return s||(console.error(`Slot ${e} does not exist`),null)};const E=`<slot name="upper-text"></slot>\r
<slot name="lower-text"></slot>\r
\r
<style>\r
    :host {\r
        --font-size-paragraph-small: 0.8rem;\r
        --font-size-paragraph: 1rem;\r
\r
        position: absolute;\r
        top: -10px;\r
        left: -10px;\r
        right: -10px;\r
        bottom: -10px;\r
        background: rgba(255, 255, 255, 0.8);\r
\r
        display: none;\r
        grid-template-rows: 1fr var(--font-size-paragraph) 100px var(--font-size-paragraph) 1fr;\r
        grid-template-columns: 1fr 100px 1fr;\r
        grid-template-areas: "topl topc topr" "uppertextl uppertextc uppertextr" "imagel imagec imager" "lowertextl lowertextc lowertextr" "bottoml bottomc bottomr";\r
        gap: 0;\r
        padding: 0;\r
\r
        &:before {\r
            content: '';\r
            grid-area: imagec;\r
            height: 100px;\r
            width: 100px;\r
        }\r
    }\r
\r
    :host(.populated) {\r
        display: grid;\r
    }\r
\r
    slot[name="upper-text"] {\r
        grid-area: uppertextc;\r
        grid-column-start: uppertextl;\r
        grid-column-end: uppertextr;\r
    }\r
\r
    slot[name="lower-text"] {\r
        grid-area: lowertextc;\r
        grid-column-start: lowertextl;\r
        grid-column-end: lowertextr;\r
    }\r
\r
    slot[name="upper-text"],\r
    slot[name="lower-text"] {\r
        display: block;\r
        text-align: center;\r
        align-self: center;\r
        font-size: var(--font-size-paragraph-small);\r
        text-wrap: nowrap;\r
        animation: dnFadeInOutRepeat 2.5s infinite;\r
\r
        p {\r
            padding: 0;\r
            margin: 0;\r
            font-size: var(--font-size-paragraph-small);\r
        }\r
    }\r
</style>`;class n extends b{constructor(e={}){super({template:E,...e});o(this,"messages",[]);o(this,"messagePosition","lower");o(this,"currentMessage",null);o(this,"messageClass","dn-loading-overlay__message");o(this,"cycleSpeed",5e3);o(this,"cycleMessagesInterval",null);let s=this.dataset.messages?JSON.parse(this.dataset.messages):[];if(this.messagePosition=this.dataset.messagePosition?this.dataset.messagePosition:"lower",this.cycleSpeed=this.dataset.cycleSpeed?this.dataset.cycleSpeed:5e3,s.length===0)return;let a=this;s.forEach(y=>{a.addMessage(y)})}startInterval(){let e=this;this.displayNextMessage(),this.cycleMessagesInterval=setInterval(function(){e.displayNextMessage()},this.cycleSpeed)}getNextMessage(){const s=(this.messages.indexOf(this.currentMessage)+1)%this.messages.length;return this.messages[s]}clearMessage(){let e=this.querySelector(`.${this.messageClass}`);e&&e.remove()}displayNextMessage(){this.currentMessage=this.getNextMessage(),this.clearMessage();let e=document.createElement("div");e.classList.add(this.messageClass),e.slot=this.messagePosition==="upper"?"upper-text":"lower-text",e.textContent=this.currentMessage,this.appendChild(e)}deleteMessage(e){const s=this.messages.indexOf(e);this.messages.splice(s,1),this.messages.length===0&&(this.classList.remove("populated"),clearInterval(this.cycleMessagesInterval),this.remove())}addMessage(e){this.classList.add("populated"),this.messages.indexOf(e)===-1&&(this.messages.push(e),this.cycleMessagesInterval||this.startInterval())}}o(n,"tagName","digital-nature-loading-overlay");customElements.define(n.tagName,n);var M=Object.defineProperty,f=r=>{throw TypeError(r)},N=(r,t,e)=>t in r?M(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,w=(r,t,e)=>N(r,typeof t!="symbol"?t+"":t,e),L=(r,t,e)=>t.has(r)||f("Cannot "+e),z=(r,t,e)=>t.has(r)?f("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(r):t.set(r,e),v=(r,t,e)=>(L(r,t,"access private method"),e),l,m;class I extends HTMLElement{constructor(t={}){if(super(),z(this,l),w(this,"options",{template:null,mode:"open",attachShadow:!0}),this.options={...this.options,...t},this.options.attachShadow&&this.attachShadow({mode:this.options.mode}),this.options.template){let e=document.createElement("template");e.innerHTML=this.options.template,this.shadowRoot.appendChild(e.content.cloneNode(!0))}if(this.options.stylesheets){let e=[];t.stylesheets.forEach(s=>{let a;typeof s=="string"?(a=new CSSStyleSheet,a.replaceSync(s)):a=s,a instanceof CSSStyleSheet?e.push(a):console.error("Failed to load stylesheet:",s,"is not a valid CSSStyleSheet or string")}),e.length>0&&(this.shadowRoot.adoptedStyleSheets=e)}}static create(t={}){if(!this.tagName)throw new Error("tagName is not defined");return new this(t)}setSlotContent(t,e){let s=v(this,l,m).call(this,t);return s?(s.innerHTML="",s.appendChild(e),!0):!1}setSlotTextContent(t,e){let s=v(this,l,m).call(this,t);return s?(s.textContent=e,!0):!1}handleEvent(t){let e=t.type.charAt(0).toUpperCase()+t.type.slice(1);typeof this[`handle${e}`]=="function"?this[`handle${e}`](t):console.error(`No handler for event ${t.type}`)}}l=new WeakSet,m=function(r){return this.shadowRoot.querySelector(`slot[name="${r}"]`)||(console.error(`Slot ${r} does not exist`),null)};const T=`<div class="message-container" title="Click to dismiss this message">\r
    <slot name="message"></slot>\r
</div>\r
<slot name="dismiss-button">\r
    <button></button>\r
</slot>\r
\r
\r
\r
<style>


\r
    :host {\r
        --message-background-colour: #FFF;\r
        --message-border-colour: #000;\r
        --message-border-radius: 1rem;\r
        --message-border-width: 2px;\r
        --message-border-style: solid;\r
        --message-font-weight: 400;\r
        --message-margin: 1rem 0;\r
        --message-grid-size: 3rem auto 3rem;\r
        --message-grid-rows: auto;\r
        --message-grid-areas: "icon message close";\r
        --message-grid-areas-gap: 1rem;\r
        --message-cursor: pointer;\r
        --message-font-colour: #000;\r
        --message-font-size: 1rem;\r
        --message-padding: 0.5rem 0;\r
\r
        --button-background-colour: #FFF;\r
        --button-background-size: 20px;\r
        --button-image-background-url: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 30 30"%3E%3Cpath d="M 7 4 C 6.744125 4 6.4879687 4.0974687 6.2929688 4.2929688 L 4.2929688 6.2929688 C 3.9019687 6.6839688 3.9019687 7.3170313 4.2929688 7.7070312 L 11.585938 15 L 4.2929688 22.292969 C 3.9019687 22.683969 3.9019687 23.317031 4.2929688 23.707031 L 6.2929688 25.707031 C 6.6839688 26.098031 7.3170313 26.098031 7.7070312 25.707031 L 15 18.414062 L 22.292969 25.707031 C 22.682969 26.098031 23.317031 26.098031 23.707031 25.707031 L 25.707031 23.707031 C 26.098031 23.316031 26.098031 22.682969 25.707031 22.292969 L 18.414062 15 L 25.707031 7.7070312 C 26.098031 7.3170312 26.098031 6.6829688 25.707031 6.2929688 L 23.707031 4.2929688 C 23.316031 3.9019687 22.682969 3.9019687 22.292969 4.2929688 L 15 11.585938 L 7.7070312 4.2929688 C 7.5115312 4.0974687 7.255875 4 7 4 z"%3E%3C/path%3E%3C/svg%3E');\r
        --button-image-background-repeat: no-repeat;\r
        --button-image-background-position: center center;\r
        --button-opacity: 0.5;\r
\r
        --image-background-colour: #000;\r
        --image-background-url: url('data:image/svg+xml,%3C%3Fxml version="1.0" encoding="UTF-8" standalone="no"%3F%3E%3Csvg   width="92.968201"   height="93.341507"   viewBox="0 0 92.968201 93.341507"   fill="none"   version="1.1"   id="svg3"   sodipodi:docname="Digital Nature Icon - Primary.svg"   inkscape:version="1.4 (86a8ad7, 2024-10-11)"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns="http://www.w3.org/2000/svg"   xmlns:svg="http://www.w3.org/2000/svg"%3E%3Cdefs     id="defs3" /%3E%3Csodipodi:namedview     id="namedview3"     pagecolor="%23ffffff"     bordercolor="%23000000"     borderopacity="0.25"     inkscape:showpageshadow="2"     inkscape:pageopacity="0.0"     inkscape:pagecheckerboard="0"     inkscape:deskcolor="%23d1d1d1"     inkscape:zoom="1.8404695"     inkscape:cx="520.51936"     inkscape:cy="167.62027"     inkscape:window-width="3840"     inkscape:window-height="2089"     inkscape:window-x="-8"     inkscape:window-y="-8"     inkscape:window-maximized="1"     inkscape:current-layer="svg3" /%3E%3Cpath     d="M 46.7356,0 C 70.2094,0 89.6411,17.3059 92.9682,39.8551 H 72.988 C 69.9423,28.2021 59.3432,19.603 46.7356,19.603 H 19.603 v 27.1326 c 0,13.6175 10.0317,24.8918 23.1082,26.8361 V 93.3001 C 18.7839,91.2594 0,71.1912 0,46.7356 V 0 Z"     fill="%237df799"     id="path2" /%3E%3Crect     x="52.316399"     y="52.707001"     width="20.252899"     height="20.252899"     fill="%237df799"     id="rect2" /%3E%3Crect     x="72.570297"     y="72.960403"     width="20.3811"     height="20.3811"     fill="%23ffffff"     id="rect3" /%3E%3C/svg%3E');\r
        --image-background-repeat: no-repeat;\r
        --image-background-position: center center;\r
        --image-background-size: 50%;\r
\r
        --hover-top: 1px;\r
\r
        display: grid;\r
        grid-template-columns: var(--message-grid-size);\r
        grid-template-rows: var(--message-grid-rows);\r
        grid-template-areas: var(--message-grid-areas);\r
        align-items: center;\r
        gap: var(--message-grid-areas-gap);\r
        position: relative;\r
        cursor: var(--message-cursor);\r
\r
        background: var(--message-background-colour);\r
        font-size: var(--message-font-size);\r
        border: var(--message-border-width) var(--message-border-style) var(--message-border-colour);\r
        border-radius: var(--message-border-radius);\r
        color: var(--message-font-colour);\r
        padding: 0;\r
        overflow: hidden;\r
        margin: var(--message-margin);\r
        font-weight: var(--message-font-weight);\r
\r
        &:before {\r
            grid-area: icon;\r
            content: "";\r
            display: block;\r
            aspect-ratio: 1 / 1;\r
            height: calc(100% - (2 * var(--message-border-width)));\r
            max-width: 100%;\r
            background-color: var(--image-background-colour);\r
            background-image: var(--image-background-url);\r
            background-repeat: var(--image-background-repeat);\r
            background-position: var(--image-background-position);\r
            background-size: var(--image-background-size);\r
            border: var(--message-border-width) solid var(--message-background-colour);\r
            border-radius: var(--message-border-radius);\r
        }\r
    }\r
\r
    :host(:hover) {\r
        top: var(--hover-top);\r
\r
        slot[name="dismiss-button"] {\r
            button {\r
                opacity: 1;\r
            }\r
        }\r
    }\r
\r
    .message-container {\r
        padding: var(--message-padding);\r
        grid-area: message;\r
    }\r
\r
    slot[name="dismiss-button"] {\r
        grid-area: close;\r
\r
        &:hover {\r
            button {\r
                opacity: 1;\r
            }\r
        }\r
\r
        button {\r
            border: none;\r
            cursor: pointer;\r
            font-size: 0;\r
            width: 100%;\r
            height: 100%;\r
            padding: 0;\r
            background: var(--button-background-colour);\r
            background-image: var(--button-image-background-url);\r
            background-repeat: var(--button-image-background-repeat);\r
            background-position: var(--button-image-background-position);\r
            background-size: var(--button-background-size);\r
            opacity: var(--button-opacity);\r
        }\r
    }\r



</style>`;class d extends I{constructor(t={}){super({template:T,...t}),this.addEventListener("click",this),t.message&&this.setSlotTextContent("message",t.message),t.classes&&t.classes.forEach(e=>this.classList.add(e))}handleClick(t){this.remove()}}w(d,"tagName","digital-nature-dismissable-message");customElements.define(d.tagName,d);const F=`<div class="digital-nature-admin-wrap">\r
    <label for="klaviyo-event-create-test-event-name">Event Name</label>\r
    <input type="text" name="event-name" value="A test event" id="klaviyo-event-create-test-event-name" />\r
    <button id="klaviyo-event-create-test-submit" type="submit">Test</button>\r
</div>`;class c extends b{constructor(){super({template:F});const t=this.shadowRoot.getElementById("klaviyo-event-create-test-submit"),e=this.shadowRoot.getElementById("klaviyo-event-create-test-event-name");t.addEventListener("click",()=>{this.setAttribute("event-name",e.value),this.runTest().then(s=>{})})}getAdoptedStyles(){return["/wp-content/plugins/dn-utilities/assets/admin/css/admin.css","/wp-content/plugins/dn-utilities/assets/common/css/common.css","/wp-content/plugins/dn-tools-for-klaviyo/assets/admin/css/admin.css"]}async runTest(){let t=["Sending data, please wait...","Processing your request..."],e=n.create();this.shadowRoot.querySelectorAll(n.tagName).forEach(a=>a.remove()),this.shadowRoot.appendChild(e),t.forEach(a=>e.addMessage(a)),await window.DigitalNature.utils.request.post("/wp-json/tools-for-klaviyo/v1/events",{event:this.getAttribute("event-name"),"event-data":{send:"success"}}),t.forEach(a=>e.deleteMessage(a));let s=d.create({message:"Success! Your event was sent to Klaviyo!",classes:["success"]});this.shadowRoot.appendChild(s)}}o(c,"tagName","tools-for-klaviyo-test-event-create"),o(c,"observedAttributes",["event-name"]);customElements.define(c.tagName,c);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
