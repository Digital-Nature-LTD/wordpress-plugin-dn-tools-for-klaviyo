var x=Object.defineProperty;var u=s=>{throw TypeError(s)};var k=(s,t,e)=>t in s?x(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var n=(s,t,e)=>k(s,typeof t!="symbol"?t+"":t,e),S=(s,t,e)=>t.has(s)||u("Cannot "+e);var v=(s,t,e)=>t.has(s)?u("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(s):t.set(s,e);var m=(s,t,e)=>(S(s,t,"access private method"),e);var l,p;class f extends HTMLElement{constructor(e={}){super();v(this,l);n(this,"options",{template:null,mode:"open",attachShadow:!0});if(this.options={...this.options,...e},this.options.attachShadow&&this.attachShadow({mode:this.options.mode}),this.options.template){let r=document.createElement("template");r.innerHTML=this.options.template,this.shadowRoot.appendChild(r.content.cloneNode(!0))}if(this.options.stylesheets){let r=[];e.stylesheets.forEach(a=>{let o;typeof a=="string"?(o=new CSSStyleSheet,o.replaceSync(a)):o=a,o instanceof CSSStyleSheet?r.push(o):console.error("Failed to load stylesheet:",a,"is not a valid CSSStyleSheet or string")}),r.length>0&&(this.shadowRoot.adoptedStyleSheets=r)}}static create(e={}){if(!this.tagName)throw new Error("tagName is not defined");return new this(e)}setSlotContent(e,r){let a=m(this,l,p).call(this,e);return a?(a.innerHTML="",a.appendChild(r),!0):!1}setSlotTextContent(e,r){let a=m(this,l,p).call(this,e);return a?(a.textContent=r,!0):!1}handleEvent(e){let r=e.type.charAt(0).toUpperCase()+e.type.slice(1);typeof this[`handle${r}`]=="function"?this[`handle${r}`](e):console.error(`No handler for event ${e.type}`)}}l=new WeakSet,p=function(e){let r=this.shadowRoot.querySelector(`slot[name="${e}"]`);return r||(console.error(`Slot ${e} does not exist`),null)};const C=`<slot name="upper-text"></slot>\r
<slot name="lower-text"></slot>\r
\r
<style>\r
    :host {\r
        --font-size-paragraph-small: 0.8rem;\r
        --font-size-paragraph: 1rem;\r
\r
        position: absolute;\r
        top: -10px;\r
        left: -10px;\r
        right: -10px;\r
        bottom: -10px;\r
        background: rgba(255, 255, 255, 0.8);\r
\r
        display: none;\r
        grid-template-rows: 1fr var(--font-size-paragraph) 100px var(--font-size-paragraph) 1fr;\r
        grid-template-columns: 1fr 100px 1fr;\r
        grid-template-areas: "topl topc topr" "uppertextl uppertextc uppertextr" "imagel imagec imager" "lowertextl lowertextc lowertextr" "bottoml bottomc bottomr";\r
        gap: 0;\r
        padding: 0;\r
\r
        &:before {\r
            content: '';\r
            grid-area: imagec;\r
            height: 100px;\r
            width: 100px;\r
        }\r
    }\r
\r
    :host(.populated) {\r
        display: grid;\r
    }\r
\r
    slot[name="upper-text"] {\r
        grid-area: uppertextc;\r
        grid-column-start: uppertextl;\r
        grid-column-end: uppertextr;\r
    }\r
\r
    slot[name="lower-text"] {\r
        grid-area: lowertextc;\r
        grid-column-start: lowertextl;\r
        grid-column-end: lowertextr;\r
    }\r
\r
    slot[name="upper-text"],\r
    slot[name="lower-text"] {\r
        display: block;\r
        text-align: center;\r
        align-self: center;\r
        font-size: var(--font-size-paragraph-small);\r
        text-wrap: nowrap;\r
        animation: dnFadeInOutRepeat 2.5s infinite;\r
\r
        p {\r
            padding: 0;\r
            margin: 0;\r
            font-size: var(--font-size-paragraph-small);\r
        }\r
    }\r
</style>`;class i extends f{constructor(e={}){super({template:C,...e});n(this,"messages",[]);n(this,"messagePosition","lower");n(this,"currentMessage",null);n(this,"messageClass","dn-loading-overlay__message");n(this,"cycleSpeed",5e3);n(this,"cycleMessagesInterval",null);let r=this.dataset.messages?JSON.parse(this.dataset.messages):[];if(this.messagePosition=this.dataset.messagePosition?this.dataset.messagePosition:"lower",this.cycleSpeed=this.dataset.cycleSpeed?this.dataset.cycleSpeed:5e3,r.length===0)return;let a=this;r.forEach(o=>{a.addMessage(o)})}startInterval(){let e=this;this.displayNextMessage(),this.cycleMessagesInterval=setInterval(function(){e.displayNextMessage()},this.cycleSpeed)}getNextMessage(){const r=(this.messages.indexOf(this.currentMessage)+1)%this.messages.length;return this.messages[r]}clearMessage(){let e=this.querySelector(`.${this.messageClass}`);e&&e.remove()}displayNextMessage(){this.currentMessage=this.getNextMessage(),this.clearMessage();let e=document.createElement("div");e.classList.add(this.messageClass),e.slot=this.messagePosition==="upper"?"upper-text":"lower-text",e.textContent=this.currentMessage,this.appendChild(e)}deleteMessage(e){const r=this.messages.indexOf(e);this.messages.splice(r,1),this.messages.length===0&&(this.classList.remove("populated"),clearInterval(this.cycleMessagesInterval),this.remove())}addMessage(e){this.classList.add("populated"),this.messages.indexOf(e)===-1&&(this.messages.push(e),this.cycleMessagesInterval||this.startInterval())}}n(i,"tagName","digital-nature-loading-overlay");customElements.define(i.tagName,i);var E=Object.defineProperty,w=s=>{throw TypeError(s)},M=(s,t,e)=>t in s?E(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e,y=(s,t,e)=>M(s,typeof t!="symbol"?t+"":t,e),N=(s,t,e)=>t.has(s)||w("Cannot "+e),L=(s,t,e)=>t.has(s)?w("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(s):t.set(s,e),b=(s,t,e)=>(N(s,t,"access private method"),e),d,h;class z extends HTMLElement{constructor(t={}){if(super(),L(this,d),y(this,"options",{template:null,mode:"open",attachShadow:!0}),this.options={...this.options,...t},this.options.attachShadow&&this.attachShadow({mode:this.options.mode}),this.options.template){let e=document.createElement("template");e.innerHTML=this.options.template,this.shadowRoot.appendChild(e.content.cloneNode(!0))}if(this.options.stylesheets){let e=[];t.stylesheets.forEach(r=>{let a;typeof r=="string"?(a=new CSSStyleSheet,a.replaceSync(r)):a=r,a instanceof CSSStyleSheet?e.push(a):console.error("Failed to load stylesheet:",r,"is not a valid CSSStyleSheet or string")}),e.length>0&&(this.shadowRoot.adoptedStyleSheets=e)}}static create(t={}){if(!this.tagName)throw new Error("tagName is not defined");return new this(t)}setSlotContent(t,e){let r=b(this,d,h).call(this,t);return r?(r.innerHTML="",r.appendChild(e),!0):!1}setSlotTextContent(t,e){let r=b(this,d,h).call(this,t);return r?(r.textContent=e,!0):!1}handleEvent(t){let e=t.type.charAt(0).toUpperCase()+t.type.slice(1);typeof this[`handle${e}`]=="function"?this[`handle${e}`](t):console.error(`No handler for event ${t.type}`)}}d=new WeakSet,h=function(s){return this.shadowRoot.querySelector(`slot[name="${s}"]`)||(console.error(`Slot ${s} does not exist`),null)};const I=`<div class="message-container" title="Click to dismiss this message">\r
    <slot name="message"></slot>\r
</div>\r
<slot name="dismiss-button">\r
    <button></button>\r
</slot>\r
\r
\r
\r
<style>


\r
    :host {\r
        --message-background-colour: #FFF;\r
        --message-border-colour: #000;\r
        --message-border-radius: 1rem;\r
        --message-border-width: 2px;\r
        --message-border-style: solid;\r
        --message-font-weight: 400;\r
        --message-margin: 1rem 0;\r
        --message-grid-size: 3rem auto 3rem;\r
        --message-grid-rows: auto;\r
        --message-grid-areas: "icon message close";\r
        --message-grid-areas-gap: 1rem;\r
        --message-cursor: pointer;\r
        --message-font-colour: #000;\r
        --message-font-size: 1rem;\r
        --message-padding: 0.5rem 0;\r
\r
        --button-background-colour: #FFF;\r
        --button-background-size: 20px;\r
        --button-image-background-url: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 30 30"%3E%3Cpath d="M 7 4 C 6.744125 4 6.4879687 4.0974687 6.2929688 4.2929688 L 4.2929688 6.2929688 C 3.9019687 6.6839688 3.9019687 7.3170313 4.2929688 7.7070312 L 11.585938 15 L 4.2929688 22.292969 C 3.9019687 22.683969 3.9019687 23.317031 4.2929688 23.707031 L 6.2929688 25.707031 C 6.6839688 26.098031 7.3170313 26.098031 7.7070312 25.707031 L 15 18.414062 L 22.292969 25.707031 C 22.682969 26.098031 23.317031 26.098031 23.707031 25.707031 L 25.707031 23.707031 C 26.098031 23.316031 26.098031 22.682969 25.707031 22.292969 L 18.414062 15 L 25.707031 7.7070312 C 26.098031 7.3170312 26.098031 6.6829688 25.707031 6.2929688 L 23.707031 4.2929688 C 23.316031 3.9019687 22.682969 3.9019687 22.292969 4.2929688 L 15 11.585938 L 7.7070312 4.2929688 C 7.5115312 4.0974687 7.255875 4 7 4 z"%3E%3C/path%3E%3C/svg%3E');\r
        --button-image-background-repeat: no-repeat;\r
        --button-image-background-position: center center;\r
        --button-opacity: 0.5;\r
\r
        --image-background-colour: #000;\r
        --image-background-url: url('data:image/svg+xml,%3C%3Fxml version="1.0" encoding="UTF-8" standalone="no"%3F%3E%3Csvg   width="92.968201"   height="93.341507"   viewBox="0 0 92.968201 93.341507"   fill="none"   version="1.1"   id="svg3"   sodipodi:docname="Digital Nature Icon - Primary.svg"   inkscape:version="1.4 (86a8ad7, 2024-10-11)"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns="http://www.w3.org/2000/svg"   xmlns:svg="http://www.w3.org/2000/svg"%3E%3Cdefs     id="defs3" /%3E%3Csodipodi:namedview     id="namedview3"     pagecolor="%23ffffff"     bordercolor="%23000000"     borderopacity="0.25"     inkscape:showpageshadow="2"     inkscape:pageopacity="0.0"     inkscape:pagecheckerboard="0"     inkscape:deskcolor="%23d1d1d1"     inkscape:zoom="1.8404695"     inkscape:cx="520.51936"     inkscape:cy="167.62027"     inkscape:window-width="3840"     inkscape:window-height="2089"     inkscape:window-x="-8"     inkscape:window-y="-8"     inkscape:window-maximized="1"     inkscape:current-layer="svg3" /%3E%3Cpath     d="M 46.7356,0 C 70.2094,0 89.6411,17.3059 92.9682,39.8551 H 72.988 C 69.9423,28.2021 59.3432,19.603 46.7356,19.603 H 19.603 v 27.1326 c 0,13.6175 10.0317,24.8918 23.1082,26.8361 V 93.3001 C 18.7839,91.2594 0,71.1912 0,46.7356 V 0 Z"     fill="%237df799"     id="path2" /%3E%3Crect     x="52.316399"     y="52.707001"     width="20.252899"     height="20.252899"     fill="%237df799"     id="rect2" /%3E%3Crect     x="72.570297"     y="72.960403"     width="20.3811"     height="20.3811"     fill="%23ffffff"     id="rect3" /%3E%3C/svg%3E');\r
        --image-background-repeat: no-repeat;\r
        --image-background-position: center center;\r
        --image-background-size: 50%;\r
\r
        --hover-top: 1px;\r
\r
        display: grid;\r
        grid-template-columns: var(--message-grid-size);\r
        grid-template-rows: var(--message-grid-rows);\r
        grid-template-areas: var(--message-grid-areas);\r
        align-items: center;\r
        gap: var(--message-grid-areas-gap);\r
        position: relative;\r
        cursor: var(--message-cursor);\r
\r
        background: var(--message-background-colour);\r
        font-size: var(--message-font-size);\r
        border: var(--message-border-width) var(--message-border-style) var(--message-border-colour);\r
        border-radius: var(--message-border-radius);\r
        color: var(--message-font-colour);\r
        padding: 0;\r
        overflow: hidden;\r
        margin: var(--message-margin);\r
        font-weight: var(--message-font-weight);\r
\r
        &:before {\r
            grid-area: icon;\r
            content: "";\r
            display: block;\r
            aspect-ratio: 1 / 1;\r
            height: calc(100% - (2 * var(--message-border-width)));\r
            max-width: 100%;\r
            background-color: var(--image-background-colour);\r
            background-image: var(--image-background-url);\r
            background-repeat: var(--image-background-repeat);\r
            background-position: var(--image-background-position);\r
            background-size: var(--image-background-size);\r
            border: var(--message-border-width) solid var(--message-background-colour);\r
            border-radius: var(--message-border-radius);\r
        }\r
    }\r
\r
    :host(:hover) {\r
        top: var(--hover-top);\r
\r
        slot[name="dismiss-button"] {\r
            button {\r
                opacity: 1;\r
            }\r
        }\r
    }\r
\r
    .message-container {\r
        padding: var(--message-padding);\r
        grid-area: message;\r
    }\r
\r
    slot[name="dismiss-button"] {\r
        grid-area: close;\r
\r
        &:hover {\r
            button {\r
                opacity: 1;\r
            }\r
        }\r
\r
        button {\r
            border: none;\r
            cursor: pointer;\r
            font-size: 0;\r
            width: 100%;\r
            height: 100%;\r
            padding: 0;\r
            background: var(--button-background-colour);\r
            background-image: var(--button-image-background-url);\r
            background-repeat: var(--button-image-background-repeat);\r
            background-position: var(--button-image-background-position);\r
            background-size: var(--button-background-size);\r
            opacity: var(--button-opacity);\r
        }\r
    }\r



</style>`;class g extends z{constructor(t={}){super({template:I,...t}),this.addEventListener("click",this),t.message&&this.setSlotTextContent("message",t.message),t.classes&&t.classes.forEach(e=>this.classList.add(e))}handleClick(t){this.remove()}}y(g,"tagName","digital-nature-dismissable-message");customElements.define(g.tagName,g);const T=`<div class="digital-nature-admin-wrap">\r
    <link rel="stylesheet" href="https://sandbox.local/wp-content/plugins/dn-utilities/assets/admin/css/admin.css" media="all">\r
    <link rel="stylesheet" href="https://sandbox.local/wp-content/plugins/dn-utilities/assets/common/css/common.css" media="all">\r
    <link rel="stylesheet" href="https://sandbox.local/wp-content/plugins/dn-tools-for-klaviyo/assets/admin/css/admin.css" media="all">\r
\r
    <label for="klaviyo-event-create-test-event-name">Event Name</label>\r
    <input type="text" name="event-name" value="A test event" id="klaviyo-event-create-test-event-name" />\r
    <button id="klaviyo-event-create-test-submit" type="submit">Test</button>\r
\r
    <digital-nature-dismissable-message>\r
        <span slot="message">This is a plain message</span>\r
    </digital-nature-dismissable-message>\r
    <digital-nature-dismissable-message class="success">\r
        <span slot="message">This is a success message</span>\r
    </digital-nature-dismissable-message>\r
    <digital-nature-dismissable-message class="error">\r
        <span slot="message">This is an error message</span>\r
    </digital-nature-dismissable-message>\r
    <digital-nature-dismissable-message class="warning">\r
        <span slot="message">This is a warning message</span>\r
    </digital-nature-dismissable-message>\r
    <digital-nature-dismissable-message class="info">\r
        <span slot="message">This is an info message</span>\r
    </digital-nature-dismissable-message>\r
</div>`;class c extends f{constructor(){super({template:T});const t=this.shadowRoot.getElementById("klaviyo-event-create-test-submit"),e=this.shadowRoot.getElementById("klaviyo-event-create-test-event-name");t.addEventListener("click",()=>{this.setAttribute("event-name",e.value),this.runTest().then(r=>{})})}async runTest(){let t=["Sending data, please wait...","Processing your request..."],e=i.create();this.shadowRoot.querySelectorAll(i.tagName).forEach(a=>a.remove()),this.shadowRoot.appendChild(e),t.forEach(a=>e.addMessage(a)),await window.DigitalNature.utils.request.post("/wp-json/tools-for-klaviyo/v1/events",{event:this.getAttribute("event-name"),"event-data":{send:"success"}}),t.forEach(a=>e.deleteMessage(a));let r=g.create({message:"Success! Your event was sent to Klaviyo!",classes:["success"]});this.shadowRoot.appendChild(r)}}n(c,"tagName","tools-for-klaviyo-test-event-create"),n(c,"observedAttributes",["event-name"]);customElements.define(c.tagName,c);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2J1aWxkL25vZGVfbW9kdWxlcy9AZGlnaXRhbC1uYXR1cmUtbHRkL3dlYi1jb21wb25lbnQvZGlnaXRhbC1uYXR1cmUtd2ViLWNvbXBvbmVudC5qcyIsIi4uLy4uLy4uLy4uL2J1aWxkL25vZGVfbW9kdWxlcy9AZGlnaXRhbC1uYXR1cmUtbHRkL2xvYWRpbmctb3ZlcmxheS1jb21wb25lbnQvZGlnaXRhbC1uYXR1cmUtbG9hZGluZy1vdmVybGF5LWNvbXBvbmVudC10ZW1wbGF0ZS5odG1sP3JhdyIsIi4uLy4uLy4uLy4uL2J1aWxkL25vZGVfbW9kdWxlcy9AZGlnaXRhbC1uYXR1cmUtbHRkL2xvYWRpbmctb3ZlcmxheS1jb21wb25lbnQvZGlnaXRhbC1uYXR1cmUtbG9hZGluZy1vdmVybGF5LWNvbXBvbmVudC5qcyIsIi4uLy4uLy4uLy4uL2J1aWxkL25vZGVfbW9kdWxlcy9AZGlnaXRhbC1uYXR1cmUtbHRkL2Rpc21pc3NhYmxlLW1lc3NhZ2UtY29tcG9uZW50L2Rpc3QvaW5kZXguZXMuanMiLCIuLi8uLi8uLi8uLi9idWlsZC9hc3NldHMvYWRtaW4vanMvd2ViLWNvbXBvbmVudHMvdGVzdC1ldmVudC1jcmVhdGUtY29tcG9uZW50L3Rlc3QtZXZlbnQtY3JlYXRlLWNvbXBvbmVudC10ZW1wbGF0ZS5odG1sP3JhdyIsIi4uLy4uLy4uLy4uL2J1aWxkL2Fzc2V0cy9hZG1pbi9qcy93ZWItY29tcG9uZW50cy90ZXN0LWV2ZW50LWNyZWF0ZS1jb21wb25lbnQvdGVzdC1ldmVudC1jcmVhdGUtY29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIERpZ2l0YWxOYXR1cmVXZWJDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudFxyXG57XHJcbiAgICBvcHRpb25zID0ge1xyXG4gICAgICAgIHRlbXBsYXRlOiBudWxsLFxyXG4gICAgICAgIG1vZGU6ICdvcGVuJyxcclxuICAgICAgICBhdHRhY2hTaGFkb3c6IHRydWUsXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgLy8gbWVyZ2UgaW4gbmV3IG9wdGlvbnNcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7Li4udGhpcy5vcHRpb25zLCAuLi5vcHRpb25zfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdHRhY2hTaGFkb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6IHRoaXMub3B0aW9ucy5tb2RlfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgdGVtcGxhdGUgYW5kIGF0dGFjaCBzaGFkb3cgZG9tIHdpdGggdGhhdCBjb250ZW50XHJcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlO1xyXG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGVtcGxhdGVFbGVtZW50LmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3R5bGVzaGVldHMpIHtcclxuICAgICAgICAgICAgbGV0IGFkb3B0ZWRTdHlsZXNoZWV0cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5zdHlsZXNoZWV0cy5mb3JFYWNoKHN0eWxlc2hlZXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFkb3B0ZWRTdHlsZXNoZWV0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVzaGVldCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZG9wdGVkU3R5bGVzaGVldCA9IG5ldyBDU1NTdHlsZVNoZWV0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRvcHRlZFN0eWxlc2hlZXQucmVwbGFjZVN5bmMoc3R5bGVzaGVldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkb3B0ZWRTdHlsZXNoZWV0ID0gc3R5bGVzaGVldDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYWRvcHRlZFN0eWxlc2hlZXQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRvcHRlZFN0eWxlc2hlZXRzLnB1c2goYWRvcHRlZFN0eWxlc2hlZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBzdHlsZXNoZWV0OicsIHN0eWxlc2hlZXQsICdpcyBub3QgYSB2YWxpZCBDU1NTdHlsZVNoZWV0IG9yIHN0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhZG9wdGVkU3R5bGVzaGVldHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFkb3B0ZWRTdHlsZVNoZWV0cyA9IGFkb3B0ZWRTdHlsZXNoZWV0cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY3JlYXRlKG9wdGlvbnMgPSB7fSlcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMudGFnTmFtZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RhZ05hbWUgaXMgbm90IGRlZmluZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzbG90IHRvIHRoZSBnaXZlbiBlbGVtZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNsb3ROYW1lXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHNldFNsb3RDb250ZW50KHNsb3ROYW1lLCBlbGVtZW50KVxyXG4gICAge1xyXG4gICAgICAgIGxldCBzbG90ID0gdGhpcy4jZ2V0U2xvdEJ5TmFtZShzbG90TmFtZSk7XHJcblxyXG4gICAgICAgIGlmICghc2xvdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjbGVhciBpdFxyXG4gICAgICAgIHNsb3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgLy8gYWRkIG5ldyBjb250ZW50XHJcbiAgICAgICAgc2xvdC5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB0ZXh0Q29udGVudCBhdHRyaWJ1dGUgb2YgdGhlIHNsb3QgdG8gdGhlIGdpdmVuIHZhbHVlXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNsb3ROYW1lXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHJldHVybiBib29sZWFuXHJcbiAgICAgKi9cclxuICAgIHNldFNsb3RUZXh0Q29udGVudChzbG90TmFtZSwgY29udGVudClcclxuICAgIHtcclxuICAgICAgICBsZXQgc2xvdCA9IHRoaXMuI2dldFNsb3RCeU5hbWUoc2xvdE5hbWUpO1xyXG5cclxuICAgICAgICBpZiAoIXNsb3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2xvdC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNsb3ROYW1lXHJcbiAgICAgKiBAcmV0dXJuIG51bGx8SFRNTEVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgI2dldFNsb3RCeU5hbWUoc2xvdE5hbWUpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHNsb3QgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcihgc2xvdFtuYW1lPVwiJHtzbG90TmFtZX1cIl1gKTtcclxuXHJcbiAgICAgICAgaWYgKCFzbG90KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFNsb3QgJHtzbG90TmFtZX0gZG9lcyBub3QgZXhpc3RgKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2xvdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsbG93cyBzaW1wbGUgaGFuZGxpbmcgb2YgZXZlbnRzLlxyXG4gICAgICpcclxuICAgICAqIElmIGEgaGFuZGxlciBleGlzdHMgZm9yIHRoZSBldmVudCB0eXBlLCB0aGVuIGl0IHdpbGwgYmUgY2FsbGVkLlxyXG4gICAgICogSWYgbm90LCB0aGVuIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBldmVudCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgaGFuZGxlci5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgaGFuZGxlciBzaG91bGQgYmUgbmFtZWQgYGhhbmRsZTxFdmVudFR5cGU+YCB3aGVyZSBFdmVudFR5cGUgaXMgdGhlXHJcbiAgICAgKiBldmVudCB0eXBlIGluIGNhbWVsIGNhc2UgLSBlLmcuIGhhbmRsZUNsaWNrLCBoYW5kbGVLZXlkb3duLCBoYW5kbGVTY3JvbGwgZXRjLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZXZlbnR9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJuIHZvaWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcclxuICAgICAgICBsZXQgY2FwaXRhbGlzZWRFdmVudFR5cGUgPSBldmVudC50eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZXZlbnQudHlwZS5zbGljZSgxKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2BoYW5kbGUke2NhcGl0YWxpc2VkRXZlbnRUeXBlfWBdID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdGhpc1tgaGFuZGxlJHtjYXBpdGFsaXNlZEV2ZW50VHlwZX1gXShldmVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTm8gaGFuZGxlciBmb3IgZXZlbnQgJHtldmVudC50eXBlfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgXCI8c2xvdCBuYW1lPVxcXCJ1cHBlci10ZXh0XFxcIj48L3Nsb3Q+XFxyXFxuPHNsb3QgbmFtZT1cXFwibG93ZXItdGV4dFxcXCI+PC9zbG90PlxcclxcblxcclxcbjxzdHlsZT5cXHJcXG4gICAgOmhvc3Qge1xcclxcbiAgICAgICAgLS1mb250LXNpemUtcGFyYWdyYXBoLXNtYWxsOiAwLjhyZW07XFxyXFxuICAgICAgICAtLWZvbnQtc2l6ZS1wYXJhZ3JhcGg6IDFyZW07XFxyXFxuXFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB0b3A6IC0xMHB4O1xcclxcbiAgICAgICAgbGVmdDogLTEwcHg7XFxyXFxuICAgICAgICByaWdodDogLTEwcHg7XFxyXFxuICAgICAgICBib3R0b206IC0xMHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcclxcblxcclxcbiAgICAgICAgZGlzcGxheTogbm9uZTtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIHZhcigtLWZvbnQtc2l6ZS1wYXJhZ3JhcGgpIDEwMHB4IHZhcigtLWZvbnQtc2l6ZS1wYXJhZ3JhcGgpIDFmcjtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDEwMHB4IDFmcjtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJ0b3BsIHRvcGMgdG9wclxcXCIgXFxcInVwcGVydGV4dGwgdXBwZXJ0ZXh0YyB1cHBlcnRleHRyXFxcIiBcXFwiaW1hZ2VsIGltYWdlYyBpbWFnZXJcXFwiIFxcXCJsb3dlcnRleHRsIGxvd2VydGV4dGMgbG93ZXJ0ZXh0clxcXCIgXFxcImJvdHRvbWwgYm90dG9tYyBib3R0b21yXFxcIjtcXHJcXG4gICAgICAgIGdhcDogMDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuXFxyXFxuICAgICAgICAmOmJlZm9yZSB7XFxyXFxuICAgICAgICAgICAgY29udGVudDogJyc7XFxyXFxuICAgICAgICAgICAgZ3JpZC1hcmVhOiBpbWFnZWM7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDBweDtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgOmhvc3QoLnBvcHVsYXRlZCkge1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBzbG90W25hbWU9XFxcInVwcGVyLXRleHRcXFwiXSB7XFxyXFxuICAgICAgICBncmlkLWFyZWE6IHVwcGVydGV4dGM7XFxyXFxuICAgICAgICBncmlkLWNvbHVtbi1zdGFydDogdXBwZXJ0ZXh0bDtcXHJcXG4gICAgICAgIGdyaWQtY29sdW1uLWVuZDogdXBwZXJ0ZXh0cjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBzbG90W25hbWU9XFxcImxvd2VyLXRleHRcXFwiXSB7XFxyXFxuICAgICAgICBncmlkLWFyZWE6IGxvd2VydGV4dGM7XFxyXFxuICAgICAgICBncmlkLWNvbHVtbi1zdGFydDogbG93ZXJ0ZXh0bDtcXHJcXG4gICAgICAgIGdyaWQtY29sdW1uLWVuZDogbG93ZXJ0ZXh0cjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBzbG90W25hbWU9XFxcInVwcGVyLXRleHRcXFwiXSxcXHJcXG4gICAgc2xvdFtuYW1lPVxcXCJsb3dlci10ZXh0XFxcIl0ge1xcclxcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxyXFxuICAgICAgICBmb250LXNpemU6IHZhcigtLWZvbnQtc2l6ZS1wYXJhZ3JhcGgtc21hbGwpO1xcclxcbiAgICAgICAgdGV4dC13cmFwOiBub3dyYXA7XFxyXFxuICAgICAgICBhbmltYXRpb246IGRuRmFkZUluT3V0UmVwZWF0IDIuNXMgaW5maW5pdGU7XFxyXFxuXFxyXFxuICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IHZhcigtLWZvbnQtc2l6ZS1wYXJhZ3JhcGgtc21hbGwpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuPC9zdHlsZT5cIiIsImltcG9ydCBEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50IGZyb20gXCJAZGlnaXRhbC1uYXR1cmUtbHRkL3dlYi1jb21wb25lbnRcIjtcclxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vZGlnaXRhbC1uYXR1cmUtbG9hZGluZy1vdmVybGF5LWNvbXBvbmVudC10ZW1wbGF0ZS5odG1sP3Jhdyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWdpdGFsTmF0dXJlTG9hZGluZ092ZXJsYXlDb21wb25lbnQgZXh0ZW5kcyBEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50XHJcbntcclxuICAgIHN0YXRpYyB0YWdOYW1lID0gJ2RpZ2l0YWwtbmF0dXJlLWxvYWRpbmctb3ZlcmxheSc7XHJcblxyXG4gICAgbWVzc2FnZXMgPSBbXTtcclxuICAgIG1lc3NhZ2VQb3NpdGlvbiA9ICdsb3dlcic7XHJcbiAgICBjdXJyZW50TWVzc2FnZSA9IG51bGw7XHJcbiAgICBtZXNzYWdlQ2xhc3MgPSAnZG4tbG9hZGluZy1vdmVybGF5X19tZXNzYWdlJ1xyXG4gICAgY3ljbGVTcGVlZCA9IDUwMDA7XHJcbiAgICBjeWNsZU1lc3NhZ2VzSW50ZXJ2YWwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHt0ZW1wbGF0ZTogdGVtcGxhdGUsIC4uLm9wdGlvbnN9KTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHRoZSBtZXNzYWdlcyBhbmQgcG9zaXRpb24gdG8gdGhlIGNvbXBvbmVudCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgbGV0IG1lc3NhZ2VzUGFzc2VkSW4gPSB0aGlzLmRhdGFzZXQubWVzc2FnZXMgPyBKU09OLnBhcnNlKHRoaXMuZGF0YXNldC5tZXNzYWdlcyk6IFtdO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZVBvc2l0aW9uID0gdGhpcy5kYXRhc2V0Lm1lc3NhZ2VQb3NpdGlvbiA/IHRoaXMuZGF0YXNldC5tZXNzYWdlUG9zaXRpb24gOiAnbG93ZXInO1xyXG4gICAgICAgIHRoaXMuY3ljbGVTcGVlZCA9IHRoaXMuZGF0YXNldC5jeWNsZVNwZWVkID8gdGhpcy5kYXRhc2V0LmN5Y2xlU3BlZWQgOiA1MDAwO1xyXG5cclxuICAgICAgICAvLyBkb24ndCBjb25maWd1cmUgaWYgdGhlcmUgYXJlIG5vIG1lc3NhZ2VzXHJcbiAgICAgICAgaWYgKG1lc3NhZ2VzUGFzc2VkSW4ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb21wb25lbnQgPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyBhZGQgYWxsIHRoZSBtZXNzYWdlcywgdGhpcyB3aWxsIHRyaWdnZXIgdGhlIGludGVydmFsXHJcbiAgICAgICAgbWVzc2FnZXNQYXNzZWRJbi5mb3JFYWNoKG1lc3NhZ2UgPT4ge1xyXG4gICAgICAgICAgICBjb21wb25lbnQuYWRkTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0SW50ZXJ2YWwoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBjb21wb25lbnQgPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyBhZGQgdGhlIGluaXRpYWwgbWVzc2FnZVxyXG4gICAgICAgIHRoaXMuZGlzcGxheU5leHRNZXNzYWdlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3ljbGVNZXNzYWdlc0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb21wb25lbnQuZGlzcGxheU5leHRNZXNzYWdlKCk7XHJcbiAgICAgICAgfSwgdGhpcy5jeWNsZVNwZWVkKVxyXG4gICAgfVxyXG5cclxuICAgIGdldE5leHRNZXNzYWdlKClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSB0aGlzLm1lc3NhZ2VzLmluZGV4T2YodGhpcy5jdXJyZW50TWVzc2FnZSk7XHJcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKGN1cnJlbnRJbmRleCArIDEpICUgdGhpcy5tZXNzYWdlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzW25leHRJbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJNZXNzYWdlKClcclxuICAgIHtcclxuICAgICAgICBsZXQgbWVzc2FnZSA9IHRoaXMucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5tZXNzYWdlQ2xhc3N9YCk7XHJcblxyXG4gICAgICAgIGlmIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXlOZXh0TWVzc2FnZSgpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gc2V0IHRoZSBjdXJyZW50IG1lc3NhZ2UgdG8gdGhlIG5leHQgb25lXHJcbiAgICAgICAgdGhpcy5jdXJyZW50TWVzc2FnZSA9IHRoaXMuZ2V0TmV4dE1lc3NhZ2UoKTtcclxuXHJcbiAgICAgICAgLy8gY2xlYXIgd2hhdCB3ZSBhbHJlYWR5IGhhdmVcclxuICAgICAgICB0aGlzLmNsZWFyTWVzc2FnZSgpXHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIHRoZSBuZXcgbWVzc2FnZVxyXG4gICAgICAgIGxldCBjdXJyZW50TWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGN1cnJlbnRNZXNzYWdlLmNsYXNzTGlzdC5hZGQodGhpcy5tZXNzYWdlQ2xhc3MpO1xyXG4gICAgICAgIGN1cnJlbnRNZXNzYWdlLnNsb3QgPSB0aGlzLm1lc3NhZ2VQb3NpdGlvbiA9PT0gJ3VwcGVyJyA/ICd1cHBlci10ZXh0JyA6ICdsb3dlci10ZXh0JztcclxuICAgICAgICBjdXJyZW50TWVzc2FnZS50ZXh0Q29udGVudCA9IHRoaXMuY3VycmVudE1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjdXJyZW50TWVzc2FnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlTWVzc2FnZShtZXNzYWdlVGV4dClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlSW5kZXggPSB0aGlzLm1lc3NhZ2VzLmluZGV4T2YobWVzc2FnZVRleHQpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXMuc3BsaWNlKG1lc3NhZ2VJbmRleCwgMSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVsYXRlZCcpO1xyXG4gICAgICAgICAgICAvLyBjbGVhciB0aGUgaW50ZXJ2YWxcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmN5Y2xlTWVzc2FnZXNJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIGVsZW1lbnRcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTWVzc2FnZShtZXNzYWdlVGV4dClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3BvcHVsYXRlZCcpO1xyXG5cclxuICAgICAgICBjb25zdCBtZXNzYWdlSW5kZXggPSB0aGlzLm1lc3NhZ2VzLmluZGV4T2YobWVzc2FnZVRleHQpO1xyXG5cclxuICAgICAgICBpZiAobWVzc2FnZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAvLyB0aGUgbWVzc2FnZSBhbHJlYWR5IGV4aXN0c1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZVRleHQpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY3ljbGVNZXNzYWdlc0ludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRJbnRlcnZhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8vIGFkZCB0aGUgY3VzdG9tIGVsZW1lbnQgdG8gdGhlIHJlZ2lzdHJ5XHJcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShEaWdpdGFsTmF0dXJlTG9hZGluZ092ZXJsYXlDb21wb25lbnQudGFnTmFtZSwgRGlnaXRhbE5hdHVyZUxvYWRpbmdPdmVybGF5Q29tcG9uZW50KTsiLCJ2YXIgcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBsID0gKG4pID0+IHtcbiAgdGhyb3cgVHlwZUVycm9yKG4pO1xufTtcbnZhciB1ID0gKG4sIHIsIGUpID0+IHIgaW4gbiA/IHAobiwgciwgeyBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwLCB2YWx1ZTogZSB9KSA6IG5bcl0gPSBlO1xudmFyIGkgPSAobiwgciwgZSkgPT4gdShuLCB0eXBlb2YgciAhPSBcInN5bWJvbFwiID8gciArIFwiXCIgOiByLCBlKSwgaCA9IChuLCByLCBlKSA9PiByLmhhcyhuKSB8fCBsKFwiQ2Fubm90IFwiICsgZSk7XG52YXIgbSA9IChuLCByLCBlKSA9PiByLmhhcyhuKSA/IGwoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpIDogciBpbnN0YW5jZW9mIFdlYWtTZXQgPyByLmFkZChuKSA6IHIuc2V0KG4sIGUpO1xudmFyIGQgPSAobiwgciwgZSkgPT4gKGgobiwgciwgXCJhY2Nlc3MgcHJpdmF0ZSBtZXRob2RcIiksIGUpO1xudmFyIG8sIGc7XG5jbGFzcyBiIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihlID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIG0odGhpcywgbyk7XG4gICAgaSh0aGlzLCBcIm9wdGlvbnNcIiwge1xuICAgICAgdGVtcGxhdGU6IG51bGwsXG4gICAgICBtb2RlOiBcIm9wZW5cIixcbiAgICAgIGF0dGFjaFNoYWRvdzogITBcbiAgICB9KTtcbiAgICBpZiAodGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLmUgfSwgdGhpcy5vcHRpb25zLmF0dGFjaFNoYWRvdyAmJiB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IHRoaXMub3B0aW9ucy5tb2RlIH0pLCB0aGlzLm9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgIGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgICAgdC5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUsIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0LmNvbnRlbnQuY2xvbmVOb2RlKCEwKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuc3R5bGVzaGVldHMpIHtcbiAgICAgIGxldCB0ID0gW107XG4gICAgICBlLnN0eWxlc2hlZXRzLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgbGV0IHM7XG4gICAgICAgIHR5cGVvZiBhID09IFwic3RyaW5nXCIgPyAocyA9IG5ldyBDU1NTdHlsZVNoZWV0KCksIHMucmVwbGFjZVN5bmMoYSkpIDogcyA9IGEsIHMgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0ID8gdC5wdXNoKHMpIDogY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2FkIHN0eWxlc2hlZXQ6XCIsIGEsIFwiaXMgbm90IGEgdmFsaWQgQ1NTU3R5bGVTaGVldCBvciBzdHJpbmdcIik7XG4gICAgICB9KSwgdC5sZW5ndGggPiAwICYmICh0aGlzLnNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzID0gdCk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBjcmVhdGUoZSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLnRhZ05hbWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0YWdOYW1lIGlzIG5vdCBkZWZpbmVkXCIpO1xuICAgIHJldHVybiBuZXcgdGhpcyhlKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgY29udGVudHMgb2YgdGhlIHNsb3QgdG8gdGhlIGdpdmVuIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNsb3ROYW1lXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIHNldFNsb3RDb250ZW50KGUsIHQpIHtcbiAgICBsZXQgYSA9IGQodGhpcywgbywgZykuY2FsbCh0aGlzLCBlKTtcbiAgICByZXR1cm4gYSA/IChhLmlubmVySFRNTCA9IFwiXCIsIGEuYXBwZW5kQ2hpbGQodCksICEwKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZXh0Q29udGVudCBhdHRyaWJ1dGUgb2YgdGhlIHNsb3QgdG8gdGhlIGdpdmVuIHZhbHVlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzbG90TmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgKiBAcmV0dXJuIGJvb2xlYW5cbiAgICovXG4gIHNldFNsb3RUZXh0Q29udGVudChlLCB0KSB7XG4gICAgbGV0IGEgPSBkKHRoaXMsIG8sIGcpLmNhbGwodGhpcywgZSk7XG4gICAgcmV0dXJuIGEgPyAoYS50ZXh0Q29udGVudCA9IHQsICEwKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvd3Mgc2ltcGxlIGhhbmRsaW5nIG9mIGV2ZW50cy5cbiAgICpcbiAgICogSWYgYSBoYW5kbGVyIGV4aXN0cyBmb3IgdGhlIGV2ZW50IHR5cGUsIHRoZW4gaXQgd2lsbCBiZSBjYWxsZWQuXG4gICAqIElmIG5vdCwgdGhlbiBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICpcbiAgICogVGhlIGV2ZW50IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyLlxuICAgKlxuICAgKiBUaGUgaGFuZGxlciBzaG91bGQgYmUgbmFtZWQgYGhhbmRsZTxFdmVudFR5cGU+YCB3aGVyZSBFdmVudFR5cGUgaXMgdGhlXG4gICAqIGV2ZW50IHR5cGUgaW4gY2FtZWwgY2FzZSAtIGUuZy4gaGFuZGxlQ2xpY2ssIGhhbmRsZUtleWRvd24sIGhhbmRsZVNjcm9sbCBldGMuXG4gICAqXG4gICAqIEBwYXJhbSB7ZXZlbnR9IGV2ZW50XG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgaGFuZGxlRXZlbnQoZSkge1xuICAgIGxldCB0ID0gZS50eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZS50eXBlLnNsaWNlKDEpO1xuICAgIHR5cGVvZiB0aGlzW2BoYW5kbGUke3R9YF0gPT0gXCJmdW5jdGlvblwiID8gdGhpc1tgaGFuZGxlJHt0fWBdKGUpIDogY29uc29sZS5lcnJvcihgTm8gaGFuZGxlciBmb3IgZXZlbnQgJHtlLnR5cGV9YCk7XG4gIH1cbn1cbm8gPSBuZXcgV2Vha1NldCgpLCAvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzbG90TmFtZVxuICogQHJldHVybiBudWxsfEhUTUxFbGVtZW50XG4gKi9cbmcgPSBmdW5jdGlvbihlKSB7XG4gIGxldCB0ID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYHNsb3RbbmFtZT1cIiR7ZX1cIl1gKTtcbiAgcmV0dXJuIHQgfHwgKGNvbnNvbGUuZXJyb3IoYFNsb3QgJHtlfSBkb2VzIG5vdCBleGlzdGApLCBudWxsKTtcbn07XG5jb25zdCB2ID0gYDxkaXYgY2xhc3M9XCJtZXNzYWdlLWNvbnRhaW5lclwiIHRpdGxlPVwiQ2xpY2sgdG8gZGlzbWlzcyB0aGlzIG1lc3NhZ2VcIj5cXHJcbiAgICA8c2xvdCBuYW1lPVwibWVzc2FnZVwiPjwvc2xvdD5cXHJcbjwvZGl2PlxcclxuPHNsb3QgbmFtZT1cImRpc21pc3MtYnV0dG9uXCI+XFxyXG4gICAgPGJ1dHRvbj48L2J1dHRvbj5cXHJcbjwvc2xvdD5cXHJcblxcclxuXFxyXG5cXHJcbjxzdHlsZT5cblxuXG5cXHJcbiAgICA6aG9zdCB7XFxyXG4gICAgICAgIC0tbWVzc2FnZS1iYWNrZ3JvdW5kLWNvbG91cjogI0ZGRjtcXHJcbiAgICAgICAgLS1tZXNzYWdlLWJvcmRlci1jb2xvdXI6ICMwMDA7XFxyXG4gICAgICAgIC0tbWVzc2FnZS1ib3JkZXItcmFkaXVzOiAxcmVtO1xcclxuICAgICAgICAtLW1lc3NhZ2UtYm9yZGVyLXdpZHRoOiAycHg7XFxyXG4gICAgICAgIC0tbWVzc2FnZS1ib3JkZXItc3R5bGU6IHNvbGlkO1xcclxuICAgICAgICAtLW1lc3NhZ2UtZm9udC13ZWlnaHQ6IDQwMDtcXHJcbiAgICAgICAgLS1tZXNzYWdlLW1hcmdpbjogMXJlbSAwO1xcclxuICAgICAgICAtLW1lc3NhZ2UtZ3JpZC1zaXplOiAzcmVtIGF1dG8gM3JlbTtcXHJcbiAgICAgICAgLS1tZXNzYWdlLWdyaWQtcm93czogYXV0bztcXHJcbiAgICAgICAgLS1tZXNzYWdlLWdyaWQtYXJlYXM6IFwiaWNvbiBtZXNzYWdlIGNsb3NlXCI7XFxyXG4gICAgICAgIC0tbWVzc2FnZS1ncmlkLWFyZWFzLWdhcDogMXJlbTtcXHJcbiAgICAgICAgLS1tZXNzYWdlLWN1cnNvcjogcG9pbnRlcjtcXHJcbiAgICAgICAgLS1tZXNzYWdlLWZvbnQtY29sb3VyOiAjMDAwO1xcclxuICAgICAgICAtLW1lc3NhZ2UtZm9udC1zaXplOiAxcmVtO1xcclxuICAgICAgICAtLW1lc3NhZ2UtcGFkZGluZzogMC41cmVtIDA7XFxyXG5cXHJcbiAgICAgICAgLS1idXR0b24tYmFja2dyb3VuZC1jb2xvdXI6ICNGRkY7XFxyXG4gICAgICAgIC0tYnV0dG9uLWJhY2tncm91bmQtc2l6ZTogMjBweDtcXHJcbiAgICAgICAgLS1idXR0b24taW1hZ2UtYmFja2dyb3VuZC11cmw6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiIHZpZXdCb3g9XCIwIDAgMzAgMzBcIiUzRSUzQ3BhdGggZD1cIk0gNyA0IEMgNi43NDQxMjUgNCA2LjQ4Nzk2ODcgNC4wOTc0Njg3IDYuMjkyOTY4OCA0LjI5Mjk2ODggTCA0LjI5Mjk2ODggNi4yOTI5Njg4IEMgMy45MDE5Njg3IDYuNjgzOTY4OCAzLjkwMTk2ODcgNy4zMTcwMzEzIDQuMjkyOTY4OCA3LjcwNzAzMTIgTCAxMS41ODU5MzggMTUgTCA0LjI5Mjk2ODggMjIuMjkyOTY5IEMgMy45MDE5Njg3IDIyLjY4Mzk2OSAzLjkwMTk2ODcgMjMuMzE3MDMxIDQuMjkyOTY4OCAyMy43MDcwMzEgTCA2LjI5Mjk2ODggMjUuNzA3MDMxIEMgNi42ODM5Njg4IDI2LjA5ODAzMSA3LjMxNzAzMTMgMjYuMDk4MDMxIDcuNzA3MDMxMiAyNS43MDcwMzEgTCAxNSAxOC40MTQwNjIgTCAyMi4yOTI5NjkgMjUuNzA3MDMxIEMgMjIuNjgyOTY5IDI2LjA5ODAzMSAyMy4zMTcwMzEgMjYuMDk4MDMxIDIzLjcwNzAzMSAyNS43MDcwMzEgTCAyNS43MDcwMzEgMjMuNzA3MDMxIEMgMjYuMDk4MDMxIDIzLjMxNjAzMSAyNi4wOTgwMzEgMjIuNjgyOTY5IDI1LjcwNzAzMSAyMi4yOTI5NjkgTCAxOC40MTQwNjIgMTUgTCAyNS43MDcwMzEgNy43MDcwMzEyIEMgMjYuMDk4MDMxIDcuMzE3MDMxMiAyNi4wOTgwMzEgNi42ODI5Njg4IDI1LjcwNzAzMSA2LjI5Mjk2ODggTCAyMy43MDcwMzEgNC4yOTI5Njg4IEMgMjMuMzE2MDMxIDMuOTAxOTY4NyAyMi42ODI5NjkgMy45MDE5Njg3IDIyLjI5Mjk2OSA0LjI5Mjk2ODggTCAxNSAxMS41ODU5MzggTCA3LjcwNzAzMTIgNC4yOTI5Njg4IEMgNy41MTE1MzEyIDQuMDk3NDY4NyA3LjI1NTg3NSA0IDcgNCB6XCIlM0UlM0MvcGF0aCUzRSUzQy9zdmclM0UnKTtcXHJcbiAgICAgICAgLS1idXR0b24taW1hZ2UtYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcbiAgICAgICAgLS1idXR0b24taW1hZ2UtYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcXHJcbiAgICAgICAgLS1idXR0b24tb3BhY2l0eTogMC41O1xcclxuXFxyXG4gICAgICAgIC0taW1hZ2UtYmFja2dyb3VuZC1jb2xvdXI6ICMwMDA7XFxyXG4gICAgICAgIC0taW1hZ2UtYmFja2dyb3VuZC11cmw6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sLCUzQyUzRnhtbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiIHN0YW5kYWxvbmU9XCJub1wiJTNGJTNFJTNDc3ZnICAgd2lkdGg9XCI5Mi45NjgyMDFcIiAgIGhlaWdodD1cIjkzLjM0MTUwN1wiICAgdmlld0JveD1cIjAgMCA5Mi45NjgyMDEgOTMuMzQxNTA3XCIgICBmaWxsPVwibm9uZVwiICAgdmVyc2lvbj1cIjEuMVwiICAgaWQ9XCJzdmczXCIgICBzb2RpcG9kaTpkb2NuYW1lPVwiRGlnaXRhbCBOYXR1cmUgSWNvbiAtIFByaW1hcnkuc3ZnXCIgICBpbmtzY2FwZTp2ZXJzaW9uPVwiMS40ICg4NmE4YWQ3LCAyMDI0LTEwLTExKVwiICAgeG1sbnM6aW5rc2NhcGU9XCJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlXCIgICB4bWxuczpzb2RpcG9kaT1cImh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkXCIgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgICB4bWxuczpzdmc9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiJTNFJTNDZGVmcyAgICAgaWQ9XCJkZWZzM1wiIC8lM0UlM0Nzb2RpcG9kaTpuYW1lZHZpZXcgICAgIGlkPVwibmFtZWR2aWV3M1wiICAgICBwYWdlY29sb3I9XCIlMjNmZmZmZmZcIiAgICAgYm9yZGVyY29sb3I9XCIlMjMwMDAwMDBcIiAgICAgYm9yZGVyb3BhY2l0eT1cIjAuMjVcIiAgICAgaW5rc2NhcGU6c2hvd3BhZ2VzaGFkb3c9XCIyXCIgICAgIGlua3NjYXBlOnBhZ2VvcGFjaXR5PVwiMC4wXCIgICAgIGlua3NjYXBlOnBhZ2VjaGVja2VyYm9hcmQ9XCIwXCIgICAgIGlua3NjYXBlOmRlc2tjb2xvcj1cIiUyM2QxZDFkMVwiICAgICBpbmtzY2FwZTp6b29tPVwiMS44NDA0Njk1XCIgICAgIGlua3NjYXBlOmN4PVwiNTIwLjUxOTM2XCIgICAgIGlua3NjYXBlOmN5PVwiMTY3LjYyMDI3XCIgICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD1cIjM4NDBcIiAgICAgaW5rc2NhcGU6d2luZG93LWhlaWdodD1cIjIwODlcIiAgICAgaW5rc2NhcGU6d2luZG93LXg9XCItOFwiICAgICBpbmtzY2FwZTp3aW5kb3cteT1cIi04XCIgICAgIGlua3NjYXBlOndpbmRvdy1tYXhpbWl6ZWQ9XCIxXCIgICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9XCJzdmczXCIgLyUzRSUzQ3BhdGggICAgIGQ9XCJNIDQ2LjczNTYsMCBDIDcwLjIwOTQsMCA4OS42NDExLDE3LjMwNTkgOTIuOTY4MiwzOS44NTUxIEggNzIuOTg4IEMgNjkuOTQyMywyOC4yMDIxIDU5LjM0MzIsMTkuNjAzIDQ2LjczNTYsMTkuNjAzIEggMTkuNjAzIHYgMjcuMTMyNiBjIDAsMTMuNjE3NSAxMC4wMzE3LDI0Ljg5MTggMjMuMTA4MiwyNi44MzYxIFYgOTMuMzAwMSBDIDE4Ljc4MzksOTEuMjU5NCAwLDcxLjE5MTIgMCw0Ni43MzU2IFYgMCBaXCIgICAgIGZpbGw9XCIlMjM3ZGY3OTlcIiAgICAgaWQ9XCJwYXRoMlwiIC8lM0UlM0NyZWN0ICAgICB4PVwiNTIuMzE2Mzk5XCIgICAgIHk9XCI1Mi43MDcwMDFcIiAgICAgd2lkdGg9XCIyMC4yNTI4OTlcIiAgICAgaGVpZ2h0PVwiMjAuMjUyODk5XCIgICAgIGZpbGw9XCIlMjM3ZGY3OTlcIiAgICAgaWQ9XCJyZWN0MlwiIC8lM0UlM0NyZWN0ICAgICB4PVwiNzIuNTcwMjk3XCIgICAgIHk9XCI3Mi45NjA0MDNcIiAgICAgd2lkdGg9XCIyMC4zODExXCIgICAgIGhlaWdodD1cIjIwLjM4MTFcIiAgICAgZmlsbD1cIiUyM2ZmZmZmZlwiICAgICBpZD1cInJlY3QzXCIgLyUzRSUzQy9zdmclM0UnKTtcXHJcbiAgICAgICAgLS1pbWFnZS1iYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxuICAgICAgICAtLWltYWdlLWJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XFxyXG4gICAgICAgIC0taW1hZ2UtYmFja2dyb3VuZC1zaXplOiA1MCU7XFxyXG5cXHJcbiAgICAgICAgLS1ob3Zlci10b3A6IDFweDtcXHJcblxcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHZhcigtLW1lc3NhZ2UtZ3JpZC1zaXplKTtcXHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiB2YXIoLS1tZXNzYWdlLWdyaWQtcm93cyk7XFxyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IHZhcigtLW1lc3NhZ2UtZ3JpZC1hcmVhcyk7XFxyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXG4gICAgICAgIGdhcDogdmFyKC0tbWVzc2FnZS1ncmlkLWFyZWFzLWdhcCk7XFxyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcbiAgICAgICAgY3Vyc29yOiB2YXIoLS1tZXNzYWdlLWN1cnNvcik7XFxyXG5cXHJcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tbWVzc2FnZS1iYWNrZ3JvdW5kLWNvbG91cik7XFxyXG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tbWVzc2FnZS1mb250LXNpemUpO1xcclxuICAgICAgICBib3JkZXI6IHZhcigtLW1lc3NhZ2UtYm9yZGVyLXdpZHRoKSB2YXIoLS1tZXNzYWdlLWJvcmRlci1zdHlsZSkgdmFyKC0tbWVzc2FnZS1ib3JkZXItY29sb3VyKTtcXHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbWVzc2FnZS1ib3JkZXItcmFkaXVzKTtcXHJcbiAgICAgICAgY29sb3I6IHZhcigtLW1lc3NhZ2UtZm9udC1jb2xvdXIpO1xcclxuICAgICAgICBwYWRkaW5nOiAwO1xcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxuICAgICAgICBtYXJnaW46IHZhcigtLW1lc3NhZ2UtbWFyZ2luKTtcXHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IHZhcigtLW1lc3NhZ2UtZm9udC13ZWlnaHQpO1xcclxuXFxyXG4gICAgICAgICY6YmVmb3JlIHtcXHJcbiAgICAgICAgICAgIGdyaWQtYXJlYTogaWNvbjtcXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XFxyXG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcXHJcbiAgICAgICAgICAgIGFzcGVjdC1yYXRpbzogMSAvIDE7XFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtICgyICogdmFyKC0tbWVzc2FnZS1ib3JkZXItd2lkdGgpKSk7XFxyXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbWFnZS1iYWNrZ3JvdW5kLWNvbG91cik7XFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB2YXIoLS1pbWFnZS1iYWNrZ3JvdW5kLXVybCk7XFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogdmFyKC0taW1hZ2UtYmFja2dyb3VuZC1yZXBlYXQpO1xcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogdmFyKC0taW1hZ2UtYmFja2dyb3VuZC1wb3NpdGlvbik7XFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IHZhcigtLWltYWdlLWJhY2tncm91bmQtc2l6ZSk7XFxyXG4gICAgICAgICAgICBib3JkZXI6IHZhcigtLW1lc3NhZ2UtYm9yZGVyLXdpZHRoKSBzb2xpZCB2YXIoLS1tZXNzYWdlLWJhY2tncm91bmQtY29sb3VyKTtcXHJcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW1lc3NhZ2UtYm9yZGVyLXJhZGl1cyk7XFxyXG4gICAgICAgIH1cXHJcbiAgICB9XFxyXG5cXHJcbiAgICA6aG9zdCg6aG92ZXIpIHtcXHJcbiAgICAgICAgdG9wOiB2YXIoLS1ob3Zlci10b3ApO1xcclxuXFxyXG4gICAgICAgIHNsb3RbbmFtZT1cImRpc21pc3MtYnV0dG9uXCJdIHtcXHJcbiAgICAgICAgICAgIGJ1dHRvbiB7XFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcXHJcbiAgICAgICAgICAgIH1cXHJcbiAgICAgICAgfVxcclxuICAgIH1cXHJcblxcclxuICAgIC5tZXNzYWdlLWNvbnRhaW5lciB7XFxyXG4gICAgICAgIHBhZGRpbmc6IHZhcigtLW1lc3NhZ2UtcGFkZGluZyk7XFxyXG4gICAgICAgIGdyaWQtYXJlYTogbWVzc2FnZTtcXHJcbiAgICB9XFxyXG5cXHJcbiAgICBzbG90W25hbWU9XCJkaXNtaXNzLWJ1dHRvblwiXSB7XFxyXG4gICAgICAgIGdyaWQtYXJlYTogY2xvc2U7XFxyXG5cXHJcbiAgICAgICAgJjpob3ZlciB7XFxyXG4gICAgICAgICAgICBidXR0b24ge1xcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XFxyXG4gICAgICAgICAgICB9XFxyXG4gICAgICAgIH1cXHJcblxcclxuICAgICAgICBidXR0b24ge1xcclxuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xcclxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxuICAgICAgICAgICAgZm9udC1zaXplOiAwO1xcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYnV0dG9uLWJhY2tncm91bmQtY29sb3VyKTtcXHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHZhcigtLWJ1dHRvbi1pbWFnZS1iYWNrZ3JvdW5kLXVybCk7XFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogdmFyKC0tYnV0dG9uLWltYWdlLWJhY2tncm91bmQtcmVwZWF0KTtcXHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHZhcigtLWJ1dHRvbi1pbWFnZS1iYWNrZ3JvdW5kLXBvc2l0aW9uKTtcXHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogdmFyKC0tYnV0dG9uLWJhY2tncm91bmQtc2l6ZSk7XFxyXG4gICAgICAgICAgICBvcGFjaXR5OiB2YXIoLS1idXR0b24tb3BhY2l0eSk7XFxyXG4gICAgICAgIH1cXHJcbiAgICB9XFxyXG5cblxuXG48L3N0eWxlPmA7XG5jbGFzcyBjIGV4dGVuZHMgYiB7XG4gIGNvbnN0cnVjdG9yKHIgPSB7fSkge1xuICAgIHN1cGVyKHsgdGVtcGxhdGU6IHYsIC4uLnIgfSksIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMpLCByLm1lc3NhZ2UgJiYgdGhpcy5zZXRTbG90VGV4dENvbnRlbnQoXCJtZXNzYWdlXCIsIHIubWVzc2FnZSksIHIuY2xhc3NlcyAmJiByLmNsYXNzZXMuZm9yRWFjaCgoZSkgPT4gdGhpcy5jbGFzc0xpc3QuYWRkKGUpKTtcbiAgfVxuICBoYW5kbGVDbGljayhyKSB7XG4gICAgdGhpcy5yZW1vdmUoKTtcbiAgfVxufVxuaShjLCBcInRhZ05hbWVcIiwgXCJkaWdpdGFsLW5hdHVyZS1kaXNtaXNzYWJsZS1tZXNzYWdlXCIpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKGMudGFnTmFtZSwgYyk7XG5leHBvcnQge1xuICBjIGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdiBjbGFzcz1cXFwiZGlnaXRhbC1uYXR1cmUtYWRtaW4td3JhcFxcXCI+XFxyXFxuICAgIDxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgaHJlZj1cXFwiaHR0cHM6Ly9zYW5kYm94LmxvY2FsL3dwLWNvbnRlbnQvcGx1Z2lucy9kbi11dGlsaXRpZXMvYXNzZXRzL2FkbWluL2Nzcy9hZG1pbi5jc3NcXFwiIG1lZGlhPVxcXCJhbGxcXFwiPlxcclxcbiAgICA8bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIGhyZWY9XFxcImh0dHBzOi8vc2FuZGJveC5sb2NhbC93cC1jb250ZW50L3BsdWdpbnMvZG4tdXRpbGl0aWVzL2Fzc2V0cy9jb21tb24vY3NzL2NvbW1vbi5jc3NcXFwiIG1lZGlhPVxcXCJhbGxcXFwiPlxcclxcbiAgICA8bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIGhyZWY9XFxcImh0dHBzOi8vc2FuZGJveC5sb2NhbC93cC1jb250ZW50L3BsdWdpbnMvZG4tdG9vbHMtZm9yLWtsYXZpeW8vYXNzZXRzL2FkbWluL2Nzcy9hZG1pbi5jc3NcXFwiIG1lZGlhPVxcXCJhbGxcXFwiPlxcclxcblxcclxcbiAgICA8bGFiZWwgZm9yPVxcXCJrbGF2aXlvLWV2ZW50LWNyZWF0ZS10ZXN0LWV2ZW50LW5hbWVcXFwiPkV2ZW50IE5hbWU8L2xhYmVsPlxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmFtZT1cXFwiZXZlbnQtbmFtZVxcXCIgdmFsdWU9XFxcIkEgdGVzdCBldmVudFxcXCIgaWQ9XFxcImtsYXZpeW8tZXZlbnQtY3JlYXRlLXRlc3QtZXZlbnQtbmFtZVxcXCIgLz5cXHJcXG4gICAgPGJ1dHRvbiBpZD1cXFwia2xhdml5by1ldmVudC1jcmVhdGUtdGVzdC1zdWJtaXRcXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCI+VGVzdDwvYnV0dG9uPlxcclxcblxcclxcbiAgICA8ZGlnaXRhbC1uYXR1cmUtZGlzbWlzc2FibGUtbWVzc2FnZT5cXHJcXG4gICAgICAgIDxzcGFuIHNsb3Q9XFxcIm1lc3NhZ2VcXFwiPlRoaXMgaXMgYSBwbGFpbiBtZXNzYWdlPC9zcGFuPlxcclxcbiAgICA8L2RpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2U+XFxyXFxuICAgIDxkaWdpdGFsLW5hdHVyZS1kaXNtaXNzYWJsZS1tZXNzYWdlIGNsYXNzPVxcXCJzdWNjZXNzXFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIHNsb3Q9XFxcIm1lc3NhZ2VcXFwiPlRoaXMgaXMgYSBzdWNjZXNzIG1lc3NhZ2U8L3NwYW4+XFxyXFxuICAgIDwvZGlnaXRhbC1uYXR1cmUtZGlzbWlzc2FibGUtbWVzc2FnZT5cXHJcXG4gICAgPGRpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2UgY2xhc3M9XFxcImVycm9yXFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIHNsb3Q9XFxcIm1lc3NhZ2VcXFwiPlRoaXMgaXMgYW4gZXJyb3IgbWVzc2FnZTwvc3Bhbj5cXHJcXG4gICAgPC9kaWdpdGFsLW5hdHVyZS1kaXNtaXNzYWJsZS1tZXNzYWdlPlxcclxcbiAgICA8ZGlnaXRhbC1uYXR1cmUtZGlzbWlzc2FibGUtbWVzc2FnZSBjbGFzcz1cXFwid2FybmluZ1xcXCI+XFxyXFxuICAgICAgICA8c3BhbiBzbG90PVxcXCJtZXNzYWdlXFxcIj5UaGlzIGlzIGEgd2FybmluZyBtZXNzYWdlPC9zcGFuPlxcclxcbiAgICA8L2RpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2U+XFxyXFxuICAgIDxkaWdpdGFsLW5hdHVyZS1kaXNtaXNzYWJsZS1tZXNzYWdlIGNsYXNzPVxcXCJpbmZvXFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIHNsb3Q9XFxcIm1lc3NhZ2VcXFwiPlRoaXMgaXMgYW4gaW5mbyBtZXNzYWdlPC9zcGFuPlxcclxcbiAgICA8L2RpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2U+XFxyXFxuPC9kaXY+XCIiLCJpbXBvcnQgRGlnaXRhbE5hdHVyZVdlYkNvbXBvbmVudCBmcm9tIFwiQGRpZ2l0YWwtbmF0dXJlLWx0ZC93ZWItY29tcG9uZW50XCI7XHJcbmltcG9ydCBEaWdpdGFsTmF0dXJlTG9hZGluZ092ZXJsYXlDb21wb25lbnQgZnJvbSBcIkBkaWdpdGFsLW5hdHVyZS1sdGQvbG9hZGluZy1vdmVybGF5LWNvbXBvbmVudFwiO1xyXG5pbXBvcnQgRGlnaXRhbE5hdHVyZURpc21pc3NhYmxlTWVzc2FnZUNvbXBvbmVudCBmcm9tIFwiQGRpZ2l0YWwtbmF0dXJlLWx0ZC9kaXNtaXNzYWJsZS1tZXNzYWdlLWNvbXBvbmVudFwiO1xyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vdGVzdC1ldmVudC1jcmVhdGUtY29tcG9uZW50LXRlbXBsYXRlLmh0bWw/cmF3XCJcclxuXHJcbmNsYXNzIFRlc3RLbGF2aXlvRXZlbnRDcmVhdGUgZXh0ZW5kcyBEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50XHJcbntcclxuICAgIHN0YXRpYyB0YWdOYW1lID0gJ3Rvb2xzLWZvci1rbGF2aXlvLXRlc3QtZXZlbnQtY3JlYXRlJztcclxuICAgIC8vIG9ic2VydmVkIGF0dHJpYnV0ZXMgd2lsbCB0cmlnZ2VyIHRoZSBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcclxuICAgIHN0YXRpYyBvYnNlcnZlZEF0dHJpYnV0ZXMgPSBbJ2V2ZW50LW5hbWUnXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gYXNzaWduIGVsZW1lbnRzIHRvIHZhcnNcclxuICAgICAgICBjb25zdCBidG4gPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoJ2tsYXZpeW8tZXZlbnQtY3JlYXRlLXRlc3Qtc3VibWl0Jyk7XHJcbiAgICAgICAgY29uc3QgZXZlbnROYW1lSW5wdXQgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoJ2tsYXZpeW8tZXZlbnQtY3JlYXRlLXRlc3QtZXZlbnQtbmFtZScpO1xyXG5cclxuICAgICAgICAvLyBhZGQgbGlzdGVuZXJzXHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZXZlbnQtbmFtZScsIGV2ZW50TmFtZUlucHV0LnZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5ydW5UZXN0KCkudGhlbihyID0+IHt9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJ1blRlc3QoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBsb2FkaW5nTWVzc2FnZXMgPSBbXHJcbiAgICAgICAgICAgICdTZW5kaW5nIGRhdGEsIHBsZWFzZSB3YWl0Li4uJyxcclxuICAgICAgICAgICAgJ1Byb2Nlc3NpbmcgeW91ciByZXF1ZXN0Li4uJyxcclxuICAgICAgICBdXHJcblxyXG4gICAgICAgIGxldCBsb2FkaW5nT3ZlcmxheSA9IERpZ2l0YWxOYXR1cmVMb2FkaW5nT3ZlcmxheUNvbXBvbmVudC5jcmVhdGUoKTtcclxuICAgICAgICAvLyByZW1vdmUgYWxsIERpZ2l0YWxOYXR1cmVMb2FkaW5nT3ZlcmxheUNvbXBvbmVudCBmcm9tIHRoaXMuc2hhZG93Um9vdFxyXG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKERpZ2l0YWxOYXR1cmVMb2FkaW5nT3ZlcmxheUNvbXBvbmVudC50YWdOYW1lKS5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKTtcclxuICAgICAgICAvLyBhZGQgdGhlIG5ldyBsb2FkaW5nIG92ZXJsYXlcclxuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQobG9hZGluZ092ZXJsYXkpO1xyXG4gICAgICAgIC8vIGFkZCBtZXNzYWdlcyB0byB0aGUgbG9hZGluZyBvdmVybGF5XHJcbiAgICAgICAgbG9hZGluZ01lc3NhZ2VzLmZvckVhY2gobWVzc2FnZSA9PiBsb2FkaW5nT3ZlcmxheS5hZGRNZXNzYWdlKG1lc3NhZ2UpKTtcclxuXHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgd2luZG93LkRpZ2l0YWxOYXR1cmUudXRpbHMucmVxdWVzdC5wb3N0KFxyXG4gICAgICAgICAgICBgL3dwLWpzb24vdG9vbHMtZm9yLWtsYXZpeW8vdjEvZXZlbnRzYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IHRoaXMuZ2V0QXR0cmlidXRlKCdldmVudC1uYW1lJyksXHJcbiAgICAgICAgICAgICAgICBcImV2ZW50LWRhdGFcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICdzZW5kJzogJ3N1Y2Nlc3MnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBsb2FkaW5nTWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IGxvYWRpbmdPdmVybGF5LmRlbGV0ZU1lc3NhZ2UobWVzc2FnZSkpO1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2VNZXNzYWdlID0gRGlnaXRhbE5hdHVyZURpc21pc3NhYmxlTWVzc2FnZUNvbXBvbmVudC5jcmVhdGUoe1xyXG4gICAgICAgICAgICAnbWVzc2FnZSc6ICdTdWNjZXNzISBZb3VyIGV2ZW50IHdhcyBzZW50IHRvIEtsYXZpeW8hJyxcclxuICAgICAgICAgICAgJ2NsYXNzZXMnOiBbJ3N1Y2Nlc3MnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChyZXNwb25zZU1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBhZGQgdGhlIGN1c3RvbSBlbGVtZW50IHRvIHRoZSByZWdpc3RyeVxyXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoVGVzdEtsYXZpeW9FdmVudENyZWF0ZS50YWdOYW1lLCBUZXN0S2xhdml5b0V2ZW50Q3JlYXRlKTsiXSwibmFtZXMiOlsiX0RpZ2l0YWxOYXR1cmVXZWJDb21wb25lbnRfaW5zdGFuY2VzIiwiZ2V0U2xvdEJ5TmFtZV9mbiIsIkRpZ2l0YWxOYXR1cmVXZWJDb21wb25lbnQiLCJvcHRpb25zIiwiX19wcml2YXRlQWRkIiwiX19wdWJsaWNGaWVsZCIsInRlbXBsYXRlRWxlbWVudCIsImFkb3B0ZWRTdHlsZXNoZWV0cyIsInN0eWxlc2hlZXQiLCJhZG9wdGVkU3R5bGVzaGVldCIsInNsb3ROYW1lIiwiZWxlbWVudCIsInNsb3QiLCJfX3ByaXZhdGVNZXRob2QiLCJjb250ZW50IiwiZXZlbnQiLCJjYXBpdGFsaXNlZEV2ZW50VHlwZSIsInRlbXBsYXRlJDEiLCJEaWdpdGFsTmF0dXJlTG9hZGluZ092ZXJsYXlDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsIm1lc3NhZ2VzUGFzc2VkSW4iLCJjb21wb25lbnQiLCJtZXNzYWdlIiwibmV4dEluZGV4IiwiY3VycmVudE1lc3NhZ2UiLCJtZXNzYWdlVGV4dCIsIm1lc3NhZ2VJbmRleCIsInAiLCJsIiwibiIsInUiLCJyIiwiaSIsImgiLCJtIiwiZCIsIm8iLCJnIiwiYiIsImUiLCJ0IiwiYSIsInMiLCJ2IiwiYyIsIlRlc3RLbGF2aXlvRXZlbnRDcmVhdGUiLCJidG4iLCJldmVudE5hbWVJbnB1dCIsImxvYWRpbmdNZXNzYWdlcyIsImxvYWRpbmdPdmVybGF5IiwiZWwiLCJyZXNwb25zZU1lc3NhZ2UiLCJEaWdpdGFsTmF0dXJlRGlzbWlzc2FibGVNZXNzYWdlQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiZ1pBQWUsSUFBQUEsRUFBQUMsRUFBQSxNQUFNQyxVQUFrQyxXQUN2RCxDQU9JLFlBQVlDLEVBQVUsR0FBSSxDQUN0QixRQVRPQyxFQUFBLEtBQUFKLEdBRVhLLEVBQUEsZUFBVSxDQUNOLFNBQVUsS0FDVixLQUFNLE9BQ04sYUFBYyxFQUNqQixHQU1HLFFBQUssUUFBVSxDQUFDLEdBQUcsS0FBSyxRQUFTLEdBQUdGLENBQU8sRUFFdkMsS0FBSyxRQUFRLGNBQ2IsS0FBSyxhQUFhLENBQUMsS0FBTSxLQUFLLFFBQVEsSUFBSSxDQUFDLEVBRzNDLEtBQUssUUFBUSxTQUFVLENBRXZCLElBQUlHLEVBQWtCLFNBQVMsY0FBYyxVQUFVLEVBQ3ZEQSxFQUFnQixVQUFZLEtBQUssUUFBUSxTQUN6QyxLQUFLLFdBQVcsWUFBWUEsRUFBZ0IsUUFBUSxVQUFVLEVBQUksQ0FBQyxDQUN0RSxDQUVELEdBQUksS0FBSyxRQUFRLFlBQWEsQ0FDMUIsSUFBSUMsRUFBcUIsQ0FBQSxFQUV6QkosRUFBUSxZQUFZLFFBQVFLLEdBQWMsQ0FDdEMsSUFBSUMsRUFFQSxPQUFPRCxHQUFlLFVBQ3RCQyxFQUFvQixJQUFJLGNBQ3hCQSxFQUFrQixZQUFZRCxDQUFVLEdBRXhDQyxFQUFvQkQsRUFHcEJDLGFBQTZCLGNBQzdCRixFQUFtQixLQUFLRSxDQUFpQixFQUV6QyxRQUFRLE1BQU0sNkJB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
