var h=Object.defineProperty;var p=t=>{throw TypeError(t)};var v=(t,r,e)=>r in t?h(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e;var n=(t,r,e)=>v(t,typeof r!="symbol"?r+"":r,e),f=(t,r,e)=>r.has(t)||p("Cannot "+e);var b=(t,r,e)=>r.has(t)?p("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(t):r.set(t,e);var c=(t,r,e)=>(f(t,r,"access private method"),e);var l,u;class m extends HTMLElement{constructor(e={}){super();b(this,l);n(this,"options",{template:null,mode:"open",attachShadow:!0});if(this.options={...this.options,...e},this.options.attachShadow&&this.attachShadow({mode:this.options.mode}),this.options.template){let a=document.createElement("template");a.innerHTML=this.options.template,this.shadowRoot.appendChild(a.content.cloneNode(!0))}}static create(e={}){if(!this.tagName)throw new Error("tagName is not defined");return new this(e)}setSlotContent(e,a){let s=c(this,l,u).call(this,e);return s?(s.innerHTML="",s.appendChild(a),!0):!1}setSlotTextContent(e,a){let s=c(this,l,u).call(this,e);return s?(s.textContent=a,!0):!1}handleEvent(e){let a=e.type.charAt(0).toUpperCase()+e.type.slice(1);typeof this[`handle${a}`]=="function"?this[`handle${a}`](e):console.error(`No handler for event ${e.type}`)}}l=new WeakSet,u=function(e){let a=this.shadowRoot.querySelector(`slot[name="${e}"]`);return a||(console.error(`Slot ${e} does not exist`),null)};const k=`<slot name="upper-text"></slot>\r
<slot name="lower-text"></slot>\r
\r
<style>\r
    :host {\r
        --font-size-paragraph-small: 0.8rem;\r
        --font-size-paragraph: 1rem;\r
\r
        position: absolute;\r
        top: -10px;\r
        left: -10px;\r
        right: -10px;\r
        bottom: -10px;\r
        background: rgba(255, 255, 255, 0.8);\r
\r
        display: none;\r
        grid-template-rows: 1fr var(--font-size-paragraph) 100px var(--font-size-paragraph) 1fr;\r
        grid-template-columns: 1fr 100px 1fr;\r
        grid-template-areas: "topl topc topr" "uppertextl uppertextc uppertextr" "imagel imagec imager" "lowertextl lowertextc lowertextr" "bottoml bottomc bottomr";\r
        gap: 0;\r
        padding: 0;\r
\r
        &:before {\r
            content: '';\r
            grid-area: imagec;\r
            height: 100px;\r
            width: 100px;\r
        }\r
    }\r
\r
    :host(.populated) {\r
        display: grid;\r
    }\r
\r
    slot[name="upper-text"] {\r
        grid-area: uppertextc;\r
        grid-column-start: uppertextl;\r
        grid-column-end: uppertextr;\r
    }\r
\r
    slot[name="lower-text"] {\r
        grid-area: lowertextc;\r
        grid-column-start: lowertextl;\r
        grid-column-end: lowertextr;\r
    }\r
\r
    slot[name="upper-text"],\r
    slot[name="lower-text"] {\r
        display: block;\r
        text-align: center;\r
        align-self: center;\r
        font-size: var(--font-size-paragraph-small);\r
        text-wrap: nowrap;\r
        animation: dnFadeInOutRepeat 2.5s infinite;\r
\r
        p {\r
            padding: 0;\r
            margin: 0;\r
            font-size: var(--font-size-paragraph-small);\r
        }\r
    }\r
</style>`;class i extends m{constructor(e={}){super({template:k,...e});n(this,"messages",[]);n(this,"messagePosition","lower");n(this,"currentMessage",null);n(this,"messageClass","dn-loading-overlay__message");n(this,"cycleSpeed",5e3);n(this,"cycleMessagesInterval",null);let a=this.dataset.messages?JSON.parse(this.dataset.messages):[];if(this.messagePosition=this.dataset.messagePosition?this.dataset.messagePosition:"lower",this.cycleSpeed=this.dataset.cycleSpeed?this.dataset.cycleSpeed:5e3,a.length===0)return;let s=this;a.forEach(o=>{s.addMessage(o)})}startInterval(){let e=this;this.displayNextMessage(),this.cycleMessagesInterval=setInterval(function(){e.displayNextMessage()},this.cycleSpeed)}getNextMessage(){const a=(this.messages.indexOf(this.currentMessage)+1)%this.messages.length;return this.messages[a]}clearMessage(){let e=this.querySelector(`.${this.messageClass}`);e&&e.remove()}displayNextMessage(){this.currentMessage=this.getNextMessage(),this.clearMessage();let e=document.createElement("div");e.classList.add(this.messageClass),e.slot=this.messagePosition==="upper"?"upper-text":"lower-text",e.textContent=this.currentMessage,this.appendChild(e)}deleteMessage(e){const a=this.messages.indexOf(e);this.messages.splice(a,1),this.messages.length===0&&(this.classList.remove("populated"),clearInterval(this.cycleMessagesInterval),this.remove())}addMessage(e){this.classList.add("populated"),this.messages.indexOf(e)===-1&&(this.messages.push(e),this.cycleMessagesInterval||this.startInterval())}}n(i,"tagName","digital-nature-loading-overlay");customElements.define(i.tagName,i);const w=`<div class="message-container" title="Click to dismiss this message">\r
    <slot name="message"></slot>\r
</div>\r
<slot name="dismiss-button">\r
    <button></button>\r
</slot>\r
\r
\r
\r
\r
\r
\r
\r
<style>\r
    :host {\r
        --message-background-colour: #FFF;\r
        --message-border-colour: #000;\r
        --message-border-radius: 0.5rem;\r
        --message-border-width: 2px;\r
        --message-border-style: solid;\r
        --message-font-weight: 400;\r
        --message-margin: 1rem 0;\r
        --message-grid-size: 3rem auto 30px;\r
        --message-grid-rows: auto;\r
        --message-grid-areas: "icon message close";\r
        --message-grid-areas-gap: 1rem;\r
        --message-cursor: pointer;\r
        --message-font-size: 1rem;\r
\r
        --button-background-colour: #FFF;\r
        --button-background-size: 20px;\r
        --button-image-background-url: url(assets/img/close.svg);\r
        --button-image-background-repeat: no-repeat;\r
        --button-image-background-position: center center;\r
        --button-opacity: 0.5;\r
\r
        --default-image-background-colour: #000;\r
        --default-image-background-url: unset;\r
        --default-image-background-repeat: no-repeat;\r
        --default-image-background-position: center center;\r
        --default-image-background-size: auto;\r
        --default-border-colour: #000;\r
        --default-font-colour: #000;\r
\r
        display: grid;\r
        grid-template-columns: var(--message-grid-size);\r
        grid-template-rows: var(--message-grid-rows);\r
        grid-template-areas: var(--message-grid-areas);\r
        align-items: center;\r
        gap: var(--message-grid-areas-gap);\r
        position: relative;\r
        cursor: var(--message-cursor);\r
\r
        background: var(--message-background-colour);\r
        font-size: var(--message-font-size);\r
        border: var(--message-border-width) var(--message-border-style) var(--message-border-colour);\r
        border-radius: var(--message-border-radius);\r
        color: var(--default-font-colour);\r
        padding: 0;\r
        overflow: hidden;\r
        margin: var(--message-margin);\r
        font-weight: var(--message-font-weight);\r
\r
        &:before {\r
            grid-area: icon;\r
            content: "";\r
            display: block;\r
            aspect-ratio: 1 / 1;\r
            height: calc(100% - (2 * var(--message-border-width)));\r
            max-width: 100%;\r
            background-color: var(--default-image-background-colour);\r
            background-image: var(--default-image-background-url);\r
            background-repeat: var(--default-image-background-repeat);\r
            background-position: var(--default-image-background-position);\r
            background-size: 1em;\r
            border: var(--message-border-width) solid var(--default-border-colour);\r
            border-radius: var(--message-border-radius);\r
        }\r
    }\r
\r
    :host(:hover) {\r
        slot[name="dismiss-button"] {\r
            button {\r
                opacity: 1;\r
            }\r
        }\r
    }\r
\r
    :host(.success) {\r
        border-color: var(--success-border-colour, var(--default-border-colour));\r
        color: var(--success-font-colour, var(--default-font-colour));\r
\r
        &:before {\r
            background-color: var(--success-image-background-colour, var(--default-image-background-colour));\r
            background-image: var(--success-image-background-url, var(--default-image-background-url));\r
            background-repeat: var(--success-image-background-repeat, var(--default-image-background-repeat));\r
            background-position: var(--success-image-background-position, var(--default-image-background-position));\r
            background-size: var(--success-image-background-size, var(--default-image-background-size));\r
        }\r
    }\r
\r
\r
    :host(.error) {\r
        border-color: var(--error-border-colour, var(--default-border-colour));\r
        color: var(--error-font-colour, var(--default-font-colour));\r
\r
        &:before {\r
            background-color: var(--error-image-background-colour, var(--default-image-background-colour));\r
            background-image: var(--error-image-background-url, var(--default-image-background-url));\r
            background-repeat: var(--error-image-background-repeat, var(--default-image-background-repeat));\r
            background-position: var(--error-image-background-position, var(--default-image-background-position));\r
            background-size: var(--error-image-background-size, var(--default-image-background-size));\r
        }\r
    }\r
\r
    :host(.warning) {\r
        border-color: var(--warning-border-colour, var(--default-border-colour));\r
        color: var(--warning-font-colour, var(--default-font-colour));\r
\r
        &:before {\r
            background-color: var(--warning-image-background-colour, var(--default-image-background-colour));\r
            background-image: var(--warning-image-background-url, var(--default-image-background-url));\r
            background-repeat: var(--warning-image-background-repeat, var(--default-image-background-repeat));\r
            background-position: var(--warning-image-background-position, var(--default-image-background-position));\r
            background-size: var(--warning-image-background-size, var(--default-image-background-size));\r
        }\r
    }\r
\r
    :host(.info) {\r
        border-color: var(--info-border-colour, var(--default-border-colour));\r
        color: var(--info-font-colour, var(--default-font-colour));\r
\r
        &:before {\r
            background-color: var(--info-image-background-colour, var(--default-image-background-colour));\r
            background-image: var(--info-image-background-url, var(--default-image-background-url));\r
            background-repeat: var(--info-image-background-repeat, var(--default-image-background-repeat));\r
            background-position: var(--info-image-background-position, var(--default-image-background-position));\r
            background-size: var(--info-image-background-size, var(--default-image-background-size));\r
        }\r
    }\r
\r
    .message-container {\r
        padding: 1rem 0;\r
        grid-area: message;\r
    }\r
\r
    slot[name="dismiss-button"] {\r
        grid-area: close;\r
\r
        &:hover {\r
            button {\r
                opacity: 1;\r
            }\r
        }\r
\r
        button {\r
            border: none;\r
            cursor: pointer;\r
            font-size: 0;\r
            width: 100%;\r
            height: 100%;\r
            padding: 0;\r
            background: var(--button-background-colour);\r
            background-image: var(--button-image-background-url);\r
            background-repeat: var(--button-image-background-repeat);\r
            background-position: var(--button-image-background-position);\r
            background-size: var(--button-background-size);\r
            opacity: var(--button-opacity);\r
        }\r
    }\r
\r
</style>`;class d extends m{constructor(r={}){super({template:w,...r}),this.addEventListener("click",this)}handleClick(r){this.remove()}}n(d,"tagName","digital-nature-dismissable-message");customElements.define(d.tagName,d);const x=`<div class="digital-nature-admin-wrap">\r
    <link rel="stylesheet" href="https://sandbox.local/wp-content/plugins/dn-utilities/assets/admin/css/admin.css" media="all">\r
    <link rel="stylesheet" href="https://sandbox.local/wp-content/plugins/dn-utilities/assets/common/css/common.css" media="all">\r
    <link rel="stylesheet" href="https://sandbox.local/wp-content/plugins/dn-tools-for-klaviyo/assets/admin/css/admin.css" media="all">\r
\r
    <label for="klaviyo-event-create-test-event-name">Event Name</label>\r
    <input type="text" name="event-name" value="A test event" id="klaviyo-event-create-test-event-name" />\r
    <button id="klaviyo-event-create-test-submit" type="submit">Test</button>\r
\r
    <digital-nature-dismissable-message class="success">\r
        <p slot="message">This is a dismissable message but the styling has gone to turd. It also has no background image. The css vars are in the dn-utilities plugin, find out what the problem is</p>\r
    </digital-nature-dismissable-message>\r
</div>`;class g extends m{constructor(){super({template:x});const r=this.shadowRoot.getElementById("klaviyo-event-create-test-submit"),e=this.shadowRoot.getElementById("klaviyo-event-create-test-event-name");r.addEventListener("click",()=>{this.setAttribute("event-name",e.value),this.runTest().then(a=>{})})}async runTest(){let r=["Sending data, please wait...","Processing your request..."],e=i.create();this.shadowRoot.querySelectorAll(i.tagName).forEach(o=>o.remove()),this.shadowRoot.appendChild(e),r.forEach(o=>e.addMessage(o));let a=await window.DigitalNature.utils.request.post("/wp-json/tools-for-klaviyo/v1/events",{event:this.getAttribute("event-name"),"event-data":{send:"success"}});console.log("Response is",a),r.forEach(o=>e.deleteMessage(o));let s=d.create();s.setSlotTextContent("message","Success! Your event was sent to Klaviyo!"),this.shadowRoot.appendChild(s)}}n(g,"tagName","tools-for-klaviyo-test-event-create"),n(g,"observedAttributes",["event-name"]);customElements.define(g.tagName,g);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
